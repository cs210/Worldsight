{"ast":null,"code":"import _regeneratorRuntime from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _a, _b;\n\nimport { EventDispatcher } from 'three';\nimport { debounce, getFirstMapKey } from '../../utilities.js';\nexport var INITIAL_STATUS_ANNOUNCEMENT = 'This page includes one or more 3D models that are loading';\nexport var FINISHED_LOADING_ANNOUNCEMENT = 'All 3D models in the page have loaded';\nvar UPDATE_STATUS_DEBOUNCE_MS = 100;\nvar $modelViewerStatusInstance = Symbol('modelViewerStatusInstance');\nvar $updateStatus = Symbol('updateStatus');\n/**\n * The LoadingStatusAnnouncer manages announcements of loading status across\n * all <model-viewer> elements in the document at any given time. As new\n * <model-viewer> elements are connected to the document, they are registered\n * with a LoadingStatusAnnouncer singleton. As they are disconnected, the are\n * also unregistered. Announcements are made to indicate the following\n * conditions:\n *\n *  1. There are <model-viewer> elements that have yet to finish loading\n *  2. All <model-viewer> elements in the page have finished attempting to load\n */\n\nexport var LoadingStatusAnnouncer = /*#__PURE__*/function (_EventDispatcher) {\n  _inherits(LoadingStatusAnnouncer, _EventDispatcher);\n\n  var _super = _createSuper(LoadingStatusAnnouncer);\n\n  function LoadingStatusAnnouncer() {\n    var _this;\n\n    _classCallCheck(this, LoadingStatusAnnouncer);\n\n    _this = _super.call(this);\n    /**\n     * The \"status\" instance is the <model-viewer> instance currently designated\n     * to announce the loading status of all <model-viewer> elements in the\n     * document at any given time. It might change as <model-viewer> elements are\n     * attached or detached over time.\n     */\n\n    _this[_a] = null;\n    _this.registeredInstanceStatuses = new Map();\n    _this.loadingPromises = [];\n    /**\n     * This element is a node that floats around the document as the status\n     * instance changes (see above). It is a singleton that represents the loading\n     * status for all <model-viewer> elements currently in the page. It has its\n     * role attribute set to \"status\", which causes screen readers to announce\n     * any changes to its text content.\n     *\n     * @see https://www.w3.org/TR/wai-aria-1.1/#status\n     */\n\n    _this.statusElement = document.createElement('p');\n    _this.statusUpdateInProgress = false;\n    _this[_b] = debounce(function () {\n      return _this.updateStatus();\n    }, UPDATE_STATUS_DEBOUNCE_MS);\n\n    var _assertThisInitialize = _assertThisInitialized(_this),\n        statusElement = _assertThisInitialize.statusElement;\n\n    var style = statusElement.style;\n    statusElement.setAttribute('role', 'status');\n    statusElement.classList.add('screen-reader-only');\n    style.top = style.left = '0';\n    style.pointerEvents = 'none';\n    return _this;\n  }\n  /**\n   * Register a <model-viewer> element with the announcer. If it is not yet\n   * loaded, its loading status will be tracked by the announcer.\n   */\n\n\n  _createClass(LoadingStatusAnnouncer, [{\n    key: \"registerInstance\",\n    value: function registerInstance(modelViewer) {\n      if (this.registeredInstanceStatuses.has(modelViewer)) {\n        return;\n      }\n\n      var onUnregistered = function onUnregistered() {};\n\n      var loadShouldBeMeasured = modelViewer.loaded === false && !!modelViewer.src;\n      var loadAttemptCompletes = new Promise(function (resolve) {\n        if (!loadShouldBeMeasured) {\n          resolve();\n          return;\n        }\n\n        var resolveHandler = function resolveHandler() {\n          resolve();\n          modelViewer.removeEventListener('load', resolveHandler);\n          modelViewer.removeEventListener('error', resolveHandler);\n        };\n\n        modelViewer.addEventListener('load', resolveHandler);\n        modelViewer.addEventListener('error', resolveHandler);\n        onUnregistered = resolveHandler;\n      });\n      this.registeredInstanceStatuses.set(modelViewer, {\n        onUnregistered: onUnregistered\n      });\n      this.loadingPromises.push(loadAttemptCompletes);\n\n      if (this.modelViewerStatusInstance == null) {\n        this.modelViewerStatusInstance = modelViewer;\n      }\n    }\n    /**\n     * Unregister a <model-viewer> element with the announcer. Its loading status\n     * will no longer be tracked by the announcer.\n     */\n\n  }, {\n    key: \"unregisterInstance\",\n    value: function unregisterInstance(modelViewer) {\n      if (!this.registeredInstanceStatuses.has(modelViewer)) {\n        return;\n      }\n\n      var statuses = this.registeredInstanceStatuses;\n      var instanceStatus = statuses.get(modelViewer);\n      statuses.delete(modelViewer);\n      instanceStatus.onUnregistered();\n\n      if (this.modelViewerStatusInstance === modelViewer) {\n        this.modelViewerStatusInstance = statuses.size > 0 ? getFirstMapKey(statuses) : null;\n      }\n    }\n  }, {\n    key: \"updateStatus\",\n    value: function () {\n      var _updateStatus = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var loadingPromises;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(this.statusUpdateInProgress || this.loadingPromises.length === 0)) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 2:\n                this.statusElement.textContent = INITIAL_STATUS_ANNOUNCEMENT;\n                this.statusUpdateInProgress = true;\n                this.dispatchEvent({\n                  type: 'initial-status-announced'\n                });\n\n              case 5:\n                if (!this.loadingPromises.length) {\n                  _context.next = 12;\n                  break;\n                }\n\n                loadingPromises = this.loadingPromises;\n                this.loadingPromises = [];\n                _context.next = 10;\n                return Promise.all(loadingPromises);\n\n              case 10:\n                _context.next = 5;\n                break;\n\n              case 12:\n                this.statusElement.textContent = FINISHED_LOADING_ANNOUNCEMENT;\n                this.statusUpdateInProgress = false;\n                this.dispatchEvent({\n                  type: 'finished-loading-announced'\n                });\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function updateStatus() {\n        return _updateStatus.apply(this, arguments);\n      }\n\n      return updateStatus;\n    }()\n  }, {\n    key: \"modelViewerStatusInstance\",\n    get: function get() {\n      return this[$modelViewerStatusInstance];\n    },\n    set: function set(value) {\n      var currentInstance = this[$modelViewerStatusInstance];\n\n      if (currentInstance === value) {\n        return;\n      }\n\n      var statusElement = this.statusElement;\n\n      if (value != null && value.shadowRoot != null) {\n        value.shadowRoot.appendChild(statusElement);\n      } else if (statusElement.parentNode != null) {\n        statusElement.parentNode.removeChild(statusElement);\n      }\n\n      this[$modelViewerStatusInstance] = value;\n      this[$updateStatus]();\n    }\n  }]);\n\n  return LoadingStatusAnnouncer;\n}(EventDispatcher);\n_a = $modelViewerStatusInstance, _b = $updateStatus;","map":{"version":3,"sources":["../../../src/features/loading/status-announcer.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {EventDispatcher} from 'three';\nimport ModelViewerElementBase from '../../model-viewer-base.js';\nimport {debounce, getFirstMapKey} from '../../utilities.js';\n\nexport const INITIAL_STATUS_ANNOUNCEMENT =\n    'This page includes one or more 3D models that are loading';\nexport const FINISHED_LOADING_ANNOUNCEMENT =\n    'All 3D models in the page have loaded';\nconst UPDATE_STATUS_DEBOUNCE_MS = 100;\n\n\nconst $modelViewerStatusInstance = Symbol('modelViewerStatusInstance');\nconst $updateStatus = Symbol('updateStatus');\n\ninterface InstanceLoadingStatus {\n  onUnregistered: () => void;\n}\n\n/**\n * The LoadingStatusAnnouncer manages announcements of loading status across\n * all <model-viewer> elements in the document at any given time. As new\n * <model-viewer> elements are connected to the document, they are registered\n * with a LoadingStatusAnnouncer singleton. As they are disconnected, the are\n * also unregistered. Announcements are made to indicate the following\n * conditions:\n *\n *  1. There are <model-viewer> elements that have yet to finish loading\n *  2. All <model-viewer> elements in the page have finished attempting to load\n */\nexport class LoadingStatusAnnouncer extends EventDispatcher {\n  /**\n   * The \"status\" instance is the <model-viewer> instance currently designated\n   * to announce the loading status of all <model-viewer> elements in the\n   * document at any given time. It might change as <model-viewer> elements are\n   * attached or detached over time.\n   */\n  protected[$modelViewerStatusInstance]: ModelViewerElementBase|null = null;\n\n  protected registeredInstanceStatuses:\n      Map<ModelViewerElementBase, InstanceLoadingStatus> =\n          new Map<ModelViewerElementBase, InstanceLoadingStatus>();\n\n  protected loadingPromises: Array<Promise<any>> = [];\n\n  /**\n   * This element is a node that floats around the document as the status\n   * instance changes (see above). It is a singleton that represents the loading\n   * status for all <model-viewer> elements currently in the page. It has its\n   * role attribute set to \"status\", which causes screen readers to announce\n   * any changes to its text content.\n   *\n   * @see https://www.w3.org/TR/wai-aria-1.1/#status\n   */\n  readonly statusElement: HTMLParagraphElement = document.createElement('p');\n  protected statusUpdateInProgress: boolean = false;\n\n  protected[$updateStatus]: () => void =\n      debounce(() => this.updateStatus(), UPDATE_STATUS_DEBOUNCE_MS);\n\n  constructor() {\n    super();\n    const {statusElement} = this;\n    const {style} = statusElement;\n\n    statusElement.setAttribute('role', 'status');\n    statusElement.classList.add('screen-reader-only');\n\n    style.top = style.left = '0';\n    style.pointerEvents = 'none';\n  }\n\n  /**\n   * Register a <model-viewer> element with the announcer. If it is not yet\n   * loaded, its loading status will be tracked by the announcer.\n   */\n  registerInstance(modelViewer: ModelViewerElementBase) {\n    if (this.registeredInstanceStatuses.has(modelViewer)) {\n      return;\n    }\n\n    let onUnregistered = () => {};\n    const loadShouldBeMeasured =\n        modelViewer.loaded === false && !!(modelViewer as any).src;\n    const loadAttemptCompletes = new Promise((resolve) => {\n      if (!loadShouldBeMeasured) {\n        resolve();\n        return;\n      }\n\n      const resolveHandler = () => {\n        resolve();\n\n        modelViewer.removeEventListener('load', resolveHandler);\n        modelViewer.removeEventListener('error', resolveHandler);\n      };\n\n      modelViewer.addEventListener('load', resolveHandler);\n      modelViewer.addEventListener('error', resolveHandler);\n\n      onUnregistered = resolveHandler;\n    });\n\n    this.registeredInstanceStatuses.set(modelViewer, {onUnregistered});\n    this.loadingPromises.push(loadAttemptCompletes);\n\n    if (this.modelViewerStatusInstance == null) {\n      this.modelViewerStatusInstance = modelViewer;\n    }\n  }\n\n  /**\n   * Unregister a <model-viewer> element with the announcer. Its loading status\n   * will no longer be tracked by the announcer.\n   */\n  unregisterInstance(modelViewer: ModelViewerElementBase) {\n    if (!this.registeredInstanceStatuses.has(modelViewer)) {\n      return;\n    }\n\n    const statuses = this.registeredInstanceStatuses;\n    const instanceStatus = statuses.get(modelViewer)!;\n    statuses.delete(modelViewer);\n    instanceStatus.onUnregistered();\n\n    if (this.modelViewerStatusInstance === modelViewer) {\n      this.modelViewerStatusInstance = statuses.size > 0 ?\n          getFirstMapKey<ModelViewerElementBase, InstanceLoadingStatus>(\n              statuses) :\n          null;\n    }\n  }\n\n  protected get modelViewerStatusInstance(): ModelViewerElementBase|null {\n    return this[$modelViewerStatusInstance];\n  }\n\n  protected set modelViewerStatusInstance(value: ModelViewerElementBase|null) {\n    const currentInstance = this[$modelViewerStatusInstance];\n    if (currentInstance === value) {\n      return;\n    }\n\n    const {statusElement} = this;\n\n    if (value != null && value.shadowRoot != null) {\n      value.shadowRoot.appendChild(statusElement);\n    } else if (statusElement.parentNode != null) {\n      statusElement.parentNode.removeChild(statusElement);\n    }\n\n    this[$modelViewerStatusInstance] = value;\n    this[$updateStatus]();\n  }\n\n  protected async updateStatus() {\n    if (this.statusUpdateInProgress || this.loadingPromises.length === 0) {\n      return;\n    }\n\n    this.statusElement.textContent = INITIAL_STATUS_ANNOUNCEMENT;\n    this.statusUpdateInProgress = true;\n    this.dispatchEvent({type: 'initial-status-announced'});\n\n    while (this.loadingPromises.length) {\n      const {loadingPromises} = this;\n      this.loadingPromises = [];\n      await Promise.all(loadingPromises);\n    }\n\n    this.statusElement.textContent = FINISHED_LOADING_ANNOUNCEMENT;\n    this.statusUpdateInProgress = false;\n    this.dispatchEvent({type: 'finished-loading-announced'});\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}