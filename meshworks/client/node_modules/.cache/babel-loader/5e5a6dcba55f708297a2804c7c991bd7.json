{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A constructor factory for a Model class. The Model is defined based on a\n * provided implementation for all specified 3DOM scene graph element types.\n *\n * The sole reason for using this factory pattern is to enable sound type\n * checking while also providing for the ability to stringify the factory so\n * that it can be part of a runtime-generated Worker script.\n *\n * @see ../api.ts\n */\nexport function defineModel(ThreeDOMElement) {\n  var _a;\n\n  var $materials = Symbol('material');\n  var $kernel = Symbol('kernel');\n  /**\n   * A Model is the root element of a 3DOM scene graph. It is considered the\n   * element of provenance for all other elements that participate in the same\n   * graph. All other elements in the graph can be accessed in from the Model\n   * in some fashion.\n   */\n\n  var Model = /*#__PURE__*/function (_ThreeDOMElement) {\n    _inherits(Model, _ThreeDOMElement);\n\n    var _super = _createSuper(Model);\n\n    function Model(kernel, serialized) {\n      var _this;\n\n      _classCallCheck(this, Model);\n\n      _this = _super.call(this, kernel);\n      _this[_a] = Object.freeze([]);\n      _this[$kernel] = kernel;\n\n      var _iterator = _createForOfIteratorHelper(serialized.materials),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var material = _step.value;\n\n          _this[$kernel].deserialize('material', material);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return _this;\n    }\n    /**\n     * The set of Material elements in the graph, in sparse traversal order.\n     * Note that this set will include any Materials that are not part of the\n     * currently activate scene.\n     *\n     * TODO(#1002): This value needs to be sensitive to scene graph order\n     */\n\n\n    _createClass(Model, [{\n      key: \"materials\",\n      get: function get() {\n        return this[$kernel].getElementsByType('material');\n      }\n      /**\n       * A Model has no owner model; it owns itself.\n       */\n\n    }, {\n      key: \"ownerModel\",\n      get: function get() {\n        return undefined;\n      }\n    }]);\n\n    return Model;\n  }(ThreeDOMElement);\n\n  _a = $materials;\n  return Model;\n}","map":{"version":3,"sources":["../../src/api/model.ts"],"names":[],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;AAuBA;;;;;;;;;;AAUA,OAAM,SAAU,WAAV,CAAsB,eAAtB,EAAmE;;;AAEvE,MAAM,UAAU,GAAG,MAAM,CAAC,UAAD,CAAzB;AACA,MAAM,OAAO,GAAG,MAAM,CAAC,QAAD,CAAtB;AAEA;;;;;;;AALuE,MAWjE,KAXiE;AAAA;;AAAA;;AAerE,mBAAY,MAAZ,EAAiC,UAAjC,EAA4D;AAAA;;AAAA;;AAC1D,gCAAM,MAAN;AAHO,YAAA,EAAA,IAA0C,MAAM,CAAC,MAAP,CAAc,EAAd,CAA1C;AAIP,YAAK,OAAL,IAAgB,MAAhB;;AAF0D,iDAInC,UAAU,CAAC,SAJwB;AAAA;;AAAA;AAI1D,4DAA6C;AAAA,cAAlC,QAAkC;;AAC3C,gBAAK,OAAL,EAAc,WAAd,CAA0B,UAA1B,EAAsC,QAAtC;AACD;AANyD;AAAA;AAAA;AAAA;AAAA;;AAAA;AAO3D;AAED;;;;;;;;;AAxBqE;AAAA;AAAA,0BA+BxD;AACX,eAAO,KAAK,OAAL,EAAc,iBAAd,CAAgC,UAAhC,CAAP;AACD;AAED;;;;AAnCqE;AAAA;AAAA,0BAsCvD;AACZ,eAAO,SAAP;AACD;AAxCoE;;AAAA;AAAA,IAWnD,eAXmD;;OAa3D,U;AA8BZ,SAAO,KAAP;AACD","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ConstructedWithArguments, Constructor, Material, Model as ModelInterface, ThreeDOMElement} from '../api.js';\nimport {SerializedModel} from '../protocol.js';\n\nimport {ModelKernel} from './model-kernel.js';\n\nexport type ModelConstructor = Constructor<ModelInterface>&\n    ConstructedWithArguments<[ModelKernel, SerializedModel]>;\n\n/**\n * A constructor factory for a Model class. The Model is defined based on a\n * provided implementation for all specified 3DOM scene graph element types.\n *\n * The sole reason for using this factory pattern is to enable sound type\n * checking while also providing for the ability to stringify the factory so\n * that it can be part of a runtime-generated Worker script.\n *\n * @see ../api.ts\n */\nexport function defineModel(ThreeDOMElement: Constructor<ThreeDOMElement>):\n    ModelConstructor {\n  const $materials = Symbol('material');\n  const $kernel = Symbol('kernel');\n\n  /**\n   * A Model is the root element of a 3DOM scene graph. It is considered the\n   * element of provenance for all other elements that participate in the same\n   * graph. All other elements in the graph can be accessed in from the Model\n   * in some fashion.\n   */\n  class Model extends ThreeDOMElement implements ModelInterface {\n    protected[$kernel]: ModelKernel;\n    protected[$materials]: Readonly<Array<Material>> = Object.freeze([]);\n\n    constructor(kernel: ModelKernel, serialized: SerializedModel) {\n      super(kernel);\n      this[$kernel] = kernel;\n\n      for (const material of serialized.materials) {\n        this[$kernel].deserialize('material', material);\n      }\n    }\n\n    /**\n     * The set of Material elements in the graph, in sparse traversal order.\n     * Note that this set will include any Materials that are not part of the\n     * currently activate scene.\n     *\n     * TODO(#1002): This value needs to be sensitive to scene graph order\n     */\n    get materials() {\n      return this[$kernel].getElementsByType('material');\n    }\n\n    /**\n     * A Model has no owner model; it owns itself.\n     */\n    get ownerModel() {\n      return undefined;\n    }\n  }\n\n  return Model;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}