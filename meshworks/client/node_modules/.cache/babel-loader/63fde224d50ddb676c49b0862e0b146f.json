{"ast":null,"code":"var _jsxFileName = \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/src/components/Uploader.js\";\nimport React, { Component } from \"react\";\nimport { Header, Grid } from \"semantic-ui-react\";\nimport DropzoneS3Uploader from 'react-dropzone-s3-uploader';\nconst AWS_BUCKET_URL = 'https://meshworks.s3.amazonaws.com/';\n\nclass UploadDisplay extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderFileUpload = (uploadedFile, i) => {\n      const {\n        filename,\n        fileUrl,\n        file\n      } = uploadedFile;\n      const file_url = AWS_BUCKET_URL + filename;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: file_url,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 9\n        }\n      }, file.name));\n    };\n  }\n\n  render() {\n    const {\n      uploadedFiles,\n      s3Url\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 7\n      }\n    }, uploadedFiles.map(this.renderFileUpload));\n  }\n\n}\n\nclass Uploader extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      success: false,\n      url: \"\",\n      error: false,\n      errorMessage: \"\"\n    };\n\n    this.handleFinishedUpload = info => {\n      console.log('File uploaded with filename', info.filename);\n      console.log(process.env.AWS_URL);\n      console.log('Access it on s3 at', AWS_BUCKET_URL + info.filename);\n    };\n  }\n\n  render() {\n    const style = {\n      height: 200,\n      border: 'dashed 2px #999',\n      borderRadius: 5,\n      position: 'relative',\n      cursor: 'pointer'\n    };\n    const uploadOptions = {\n      style,\n      server: 'http://localhost:5000',\n      s3Url: {\n        AWS_BUCKET_URL\n      }\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      textAlign: \"center\",\n      style: {\n        height: \"100vh\"\n      },\n      verticalAlign: \"middle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      style: {\n        maxWidth: 450\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      size: \"huge\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }\n    }, \" UPLOAD A FILE \"), /*#__PURE__*/React.createElement(DropzoneS3Uploader, Object.assign({\n      onFinish: this.handleFinishedUpload\n    }, uploadOptions, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(UploadDisplay, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 89\n      }\n    })))));\n  }\n\n}\n\nexport default Uploader;","map":{"version":3,"sources":["/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/src/components/Uploader.js"],"names":["React","Component","Header","Grid","DropzoneS3Uploader","AWS_BUCKET_URL","UploadDisplay","renderFileUpload","uploadedFile","i","filename","fileUrl","file","file_url","name","render","uploadedFiles","s3Url","props","map","Uploader","constructor","state","success","url","error","errorMessage","handleFinishedUpload","info","console","log","process","env","AWS_URL","style","height","border","borderRadius","position","cursor","uploadOptions","server","maxWidth"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Header, Grid } from \"semantic-ui-react\";\nimport DropzoneS3Uploader from 'react-dropzone-s3-uploader';\n\nconst AWS_BUCKET_URL='https://meshworks.s3.amazonaws.com/'\nclass UploadDisplay extends React.Component {\n  renderFileUpload = (uploadedFile, i) => {\n    const {filename, fileUrl, file} = uploadedFile\n    const file_url = AWS_BUCKET_URL+filename\n    return (\n      <div key={i}>\n        <img src={file_url} />\n        <p>{file.name}</p>\n      </div>\n    )\n  }\n\n  render() {\n    const {uploadedFiles, s3Url} = this.props\n    return (\n      <div> \n        {uploadedFiles.map(this.renderFileUpload)}\n      </div>\n    )\n  }\n}\n\nclass Uploader extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  state = {\n    success: false,\n    url: \"\",\n    error: false,\n    errorMessage: \"\",\n  };\n  \n  handleFinishedUpload = info => {\n    console.log('File uploaded with filename', info.filename)\n    console.log(process.env.AWS_URL)\n    console.log('Access it on s3 at', AWS_BUCKET_URL+info.filename)\n  }\n\n  render() {\n    const style = {\n      height: 200,\n      border: 'dashed 2px #999',\n      borderRadius: 5,\n      position: 'relative',\n      cursor: 'pointer',\n    };\n    const uploadOptions = {\n      style,\n      server: 'http://localhost:5000',\n      s3Url: {AWS_BUCKET_URL},\n    }\n    \n    return (\n      <div>\n        <Grid\n          textAlign=\"center\"\n          style={{ height: \"100vh\" }}\n          verticalAlign=\"middle\"\n        >\n          <Grid.Column style={{ maxWidth: 450 }}>\n            <Header size=\"huge\"> UPLOAD A FILE </Header>\n            <DropzoneS3Uploader onFinish={this.handleFinishedUpload} {...uploadOptions}><UploadDisplay /></DropzoneS3Uploader>\n          </Grid.Column>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default Uploader;"]},"metadata":{},"sourceType":"module"}