{"ast":null,"code":"import _regeneratorRuntime from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A constructor factory for a PBRMetallicRoughness class. The\n * PBRMetallicRoughness is defined based on a provided implementation for all\n * specified 3DOM scene graph element types.\n *\n * The sole reason for using this factory pattern is to enable sound type\n * checking while also providing for the ability to stringify the factory so\n * that it can be part of a runtime-generated Worker script.\n *\n * @see ../api.ts\n */\nexport function definePBRMetallicRoughness(ThreeDOMElement) {\n  var $kernel = Symbol('kernel');\n  var $baseColorFactor = Symbol('baseColorFactor');\n  /**\n   * PBRMetallicRoughness exposes the PBR properties for a given Material.\n   */\n\n  var PBRMetallicRoughness = /*#__PURE__*/function (_ThreeDOMElement) {\n    _inherits(PBRMetallicRoughness, _ThreeDOMElement);\n\n    var _super = _createSuper(PBRMetallicRoughness);\n\n    function PBRMetallicRoughness(kernel, serialized) {\n      var _this;\n\n      _classCallCheck(this, PBRMetallicRoughness);\n\n      _this = _super.call(this, kernel, serialized);\n      _this[$kernel] = kernel;\n      _this[$baseColorFactor] = Object.freeze(serialized.baseColorFactor);\n      return _this;\n    }\n    /**\n     * The base color factor of the material in RGBA format.\n     */\n\n\n    _createClass(PBRMetallicRoughness, [{\n      key: \"setBaseColorFactor\",\n\n      /**\n       * Set the base color factor of the material.\n       * Requires the material-properties capability.\n       *\n       * @see ../api.ts\n       */\n      value: function () {\n        var _setBaseColorFactor = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(color) {\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return this[$kernel].mutate(this, 'baseColorFactor', color);\n\n                case 2:\n                  this[$baseColorFactor] = Object.freeze(color);\n\n                case 3:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n\n        function setBaseColorFactor(_x) {\n          return _setBaseColorFactor.apply(this, arguments);\n        }\n\n        return setBaseColorFactor;\n      }()\n    }, {\n      key: \"baseColorFactor\",\n      get: function get() {\n        return this[$baseColorFactor];\n      }\n    }]);\n\n    return PBRMetallicRoughness;\n  }(ThreeDOMElement);\n\n  return PBRMetallicRoughness;\n}","map":{"version":3,"sources":["../../src/api/pbr-metallic-roughness.ts"],"names":[],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;AAwBA;;;;;;;;;;;AAWA,OAAM,SAAU,0BAAV,CACF,eADE,EAC2C;AAE/C,MAAM,OAAO,GAAG,MAAM,CAAC,QAAD,CAAtB;AACA,MAAM,gBAAgB,GAAG,MAAM,CAAC,iBAAD,CAA/B;AAEA;;;;AAL+C,MAQzC,oBARyC;AAAA;;AAAA;;AAa7C,kCACI,MADJ,EACyB,UADzB,EACmE;AAAA;;AAAA;;AACjE,gCAAM,MAAN,EAAc,UAAd;AAEA,YAAK,OAAL,IAAgB,MAAhB;AACA,YAAK,gBAAL,IACI,MAAM,CAAC,MAAP,CAAc,UAAU,CAAC,eAAzB,CADJ;AAJiE;AAMlE;AAED;;;;;AAtB6C;AAAA;;AA6B7C;;;;;;AA7B6C;AAAA,4GAmCpB,KAnCoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAoCrC,KAAK,OAAL,EAAc,MAAd,CAAqB,IAArB,EAA2B,iBAA3B,EAA8C,KAA9C,CApCqC;;AAAA;AAqC3C,uBAAK,gBAAL,IAAyB,MAAM,CAAC,MAAP,CAAc,KAAd,CAAzB;;AArC2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,0BAyB1B;AACjB,eAAO,KAAK,gBAAL,CAAP;AACD;AA3B4C;;AAAA;AAAA,IAQZ,eARY;;AAyC/C,SAAO,oBAAP;AACD","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ConstructedWithArguments, Constructor, PBRMetallicRoughness as PBRMetallicRoughnessInterface, RGBA, ThreeDOMElement} from '../api.js';\nimport {SerializedPBRMetallicRoughness} from '../protocol.js';\n\nimport {ModelKernel} from './model-kernel.js';\n\nexport type PBRMetallicRoughnessConstructor =\n    Constructor<PBRMetallicRoughnessInterface>&\n    ConstructedWithArguments<[ModelKernel, SerializedPBRMetallicRoughness]>;\n\n/**\n * A constructor factory for a PBRMetallicRoughness class. The\n * PBRMetallicRoughness is defined based on a provided implementation for all\n * specified 3DOM scene graph element types.\n *\n * The sole reason for using this factory pattern is to enable sound type\n * checking while also providing for the ability to stringify the factory so\n * that it can be part of a runtime-generated Worker script.\n *\n * @see ../api.ts\n */\nexport function definePBRMetallicRoughness(\n    ThreeDOMElement: Constructor<ThreeDOMElement>):\n    PBRMetallicRoughnessConstructor {\n  const $kernel = Symbol('kernel');\n  const $baseColorFactor = Symbol('baseColorFactor');\n\n  /**\n   * PBRMetallicRoughness exposes the PBR properties for a given Material.\n   */\n  class PBRMetallicRoughness extends ThreeDOMElement implements\n      PBRMetallicRoughnessInterface {\n    protected[$kernel]: ModelKernel;\n    protected[$baseColorFactor]: Readonly<RGBA>;\n\n    constructor(\n        kernel: ModelKernel, serialized: SerializedPBRMetallicRoughness) {\n      super(kernel, serialized);\n\n      this[$kernel] = kernel;\n      this[$baseColorFactor] =\n          Object.freeze(serialized.baseColorFactor) as RGBA;\n    }\n\n    /**\n     * The base color factor of the material in RGBA format.\n     */\n    get baseColorFactor() {\n      return this[$baseColorFactor];\n    }\n\n    /**\n     * Set the base color factor of the material.\n     * Requires the material-properties capability.\n     *\n     * @see ../api.ts\n     */\n    async setBaseColorFactor(color: RGBA) {\n      await this[$kernel].mutate(this, 'baseColorFactor', color);\n      this[$baseColorFactor] = Object.freeze(color) as RGBA;\n    }\n  }\n\n  return PBRMetallicRoughness;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}