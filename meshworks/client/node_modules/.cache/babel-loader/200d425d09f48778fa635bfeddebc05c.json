{"ast":null,"code":"import _classCallCheck from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _a, _b, _c, _d, _e;\n\nimport { Vector3 } from 'three';\nimport { CSS2DObject } from 'three/examples/jsm/renderers/CSS2DRenderer.js';\nimport { normalizeUnit } from '../styles/conversions.js';\nimport { parseExpressions } from '../styles/parsers.js';\nvar $slot = Symbol('slot');\nvar $pivot = Symbol('pivot');\nvar $referenceCount = Symbol('referenceCount');\nvar $updateVisibility = Symbol('updateVisibility');\nvar $visible = Symbol('visible');\nvar $onSlotchange = Symbol('onSlotchange');\nvar $slotchangeHandler = Symbol('slotchangeHandler');\n/**\n * The Hotspot object is a reference-counted slot. If decrement() returns true,\n * it should be removed from the tree so it can be garbage-collected.\n */\n\nexport var Hotspot = /*#__PURE__*/function (_CSS2DObject) {\n  _inherits(Hotspot, _CSS2DObject);\n\n  var _super = _createSuper(Hotspot);\n\n  function Hotspot(config) {\n    var _this;\n\n    _classCallCheck(this, Hotspot);\n\n    _this = _super.call(this, document.createElement('div'));\n    _this.normal = new Vector3(0, 1, 0);\n    _this[_a] = false;\n    _this[_b] = 1;\n    _this[_c] = document.createElement('div');\n    _this[_d] = document.createElement('slot');\n\n    _this[_e] = function () {\n      return _this[$onSlotchange]();\n    };\n\n    _this.element.classList.add('annotation-wrapper');\n\n    _this[$slot].name = config.name;\n\n    _this[$slot].addEventListener('slotchange', _this[$slotchangeHandler]);\n\n    _this.element.appendChild(_this[$pivot]);\n\n    _this[$pivot].appendChild(_this[$slot]);\n\n    _this.updatePosition(config.position);\n\n    _this.updateNormal(config.normal);\n\n    _this.show();\n\n    return _this;\n  }\n  /**\n   * Sets the hotspot to be in the highly visible foreground state.\n   */\n\n\n  _createClass(Hotspot, [{\n    key: \"show\",\n    value: function show() {\n      if (!this[$visible]) {\n        this[$visible] = true;\n        this[$updateVisibility]({\n          notify: true\n        });\n      }\n    }\n    /**\n     * Sets the hotspot to be in the diminished background state.\n     */\n\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      if (this[$visible]) {\n        this[$visible] = false;\n        this[$updateVisibility]({\n          notify: true\n        });\n      }\n    }\n    /**\n     * Cleans up the held references of this Hotspot when it is done being used.\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this[$slot].removeEventListener('slotchange', this[$slotchangeHandler]);\n    }\n    /**\n     * Call this when adding elements to the same slot to keep track.\n     */\n\n  }, {\n    key: \"increment\",\n    value: function increment() {\n      this[$referenceCount]++;\n    }\n    /**\n     * Call this when removing elements from the slot; returns true when the slot\n     * is unused.\n     */\n\n  }, {\n    key: \"decrement\",\n    value: function decrement() {\n      if (this[$referenceCount] > 0) {\n        --this[$referenceCount];\n      }\n\n      return this[$referenceCount] === 0;\n    }\n    /**\n     * Change the position of the hotspot to the input string, in the same format\n     * as the data-position attribute.\n     */\n\n  }, {\n    key: \"updatePosition\",\n    value: function updatePosition(position) {\n      if (position == null) return;\n      var positionNodes = parseExpressions(position)[0].terms;\n\n      for (var i = 0; i < 3; ++i) {\n        this.position.setComponent(i, normalizeUnit(positionNodes[i]).number);\n      }\n    }\n    /**\n     * Change the hotspot's normal to the input string, in the same format as the\n     * data-normal attribute.\n     */\n\n  }, {\n    key: \"updateNormal\",\n    value: function updateNormal(normal) {\n      if (normal == null) return;\n      var normalNodes = parseExpressions(normal)[0].terms;\n\n      for (var i = 0; i < 3; ++i) {\n        this.normal.setComponent(i, normalizeUnit(normalNodes[i]).number);\n      }\n    }\n  }, {\n    key: \"orient\",\n    value: function orient(radians) {\n      this[$pivot].style.transform = \"rotate(\".concat(radians, \"rad)\");\n    }\n  }, {\n    key: (_a = $visible, _b = $referenceCount, _c = $pivot, _d = $slot, _e = $slotchangeHandler, $updateVisibility),\n    value: function value(_ref) {\n      var _this2 = this;\n\n      var notify = _ref.notify;\n\n      // NOTE: IE11 doesn't support a second arg for classList.toggle\n      if (this[$visible]) {\n        this.element.classList.remove('hide');\n      } else {\n        this.element.classList.add('hide');\n      } // NOTE: ShadyDOM doesn't support slot.assignedElements, otherwise we could\n      // use that here.\n\n\n      this[$slot].assignedNodes().forEach(function (node) {\n        if (node.nodeType !== Node.ELEMENT_NODE) {\n          return;\n        }\n\n        var element = node; // Visibility attribute can be configured per-node in the hotspot:\n\n        var visibilityAttribute = element.dataset.visibilityAttribute;\n\n        if (visibilityAttribute != null) {\n          var attributeName = \"data-\".concat(visibilityAttribute); // NOTE: IE11 doesn't support toggleAttribute\n\n          if (_this2[$visible]) {\n            element.setAttribute(attributeName, '');\n          } else {\n            element.removeAttribute(attributeName);\n          }\n        }\n\n        if (notify) {\n          element.dispatchEvent(new CustomEvent('hotspot-visibility', {\n            detail: {\n              visible: _this2[$visible]\n            }\n          }));\n        }\n      });\n    }\n  }, {\n    key: $onSlotchange,\n    value: function value() {\n      this[$updateVisibility]({\n        notify: false\n      });\n    }\n  }]);\n\n  return Hotspot;\n}(CSS2DObject);","map":{"version":3,"sources":["../../src/three-components/Hotspot.ts"],"names":[],"mappings":";;;;;AAAA;;;;;;;;;;;;;;;;AAeA,SAAQ,OAAR,QAAsB,OAAtB;AACA,SAAQ,WAAR,QAA0B,+CAA1B;AACA,SAAQ,aAAR,QAA4B,0BAA5B;AACA,SAAoB,gBAApB,QAA2C,sBAA3C;AAkBA,IAAM,KAAK,GAAG,MAAM,CAAC,MAAD,CAApB;AACA,IAAM,MAAM,GAAG,MAAM,CAAC,OAAD,CAArB;AACA,IAAM,eAAe,GAAG,MAAM,CAAC,gBAAD,CAA9B;AACA,IAAM,iBAAiB,GAAG,MAAM,CAAC,kBAAD,CAAhC;AACA,IAAM,QAAQ,GAAG,MAAM,CAAC,SAAD,CAAvB;AAEA,IAAM,aAAa,GAAG,MAAM,CAAC,cAAD,CAA5B;AACA,IAAM,kBAAkB,GAAG,MAAM,CAAC,mBAAD,CAAjC;AAEA;;;;;AAIA,WAAa,OAAb;AAAA;;AAAA;;AAQE,mBAAY,MAAZ,EAAwC;AAAA;;AAAA;;AACtC,8BAAM,QAAQ,CAAC,aAAT,CAAuB,KAAvB,CAAN;AARK,UAAA,MAAA,GAAkB,IAAI,OAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAAlB;AACA,UAAA,EAAA,IAAa,KAAb;AACA,UAAA,EAAA,IAAoB,CAApB;AACA,UAAA,EAAA,IAAW,QAAQ,CAAC,aAAT,CAAuB,KAAvB,CAAX;AACA,UAAA,EAAA,IAA2B,QAAQ,CAAC,aAAT,CAAuB,MAAvB,CAA3B;;AACA,UAAA,EAAA,IAAuB;AAAA,aAAM,MAAK,aAAL,GAAN;AAAA,KAAvB;;AAKL,UAAK,OAAL,CAAa,SAAb,CAAuB,GAAvB,CAA2B,oBAA3B;;AAEA,UAAK,KAAL,EAAY,IAAZ,GAAmB,MAAM,CAAC,IAA1B;;AACA,UAAK,KAAL,EAAY,gBAAZ,CAA6B,YAA7B,EAA2C,MAAK,kBAAL,CAA3C;;AAEA,UAAK,OAAL,CAAa,WAAb,CAAyB,MAAK,MAAL,CAAzB;;AACA,UAAK,MAAL,EAAa,WAAb,CAAyB,MAAK,KAAL,CAAzB;;AAEA,UAAK,cAAL,CAAoB,MAAM,CAAC,QAA3B;;AACA,UAAK,YAAL,CAAkB,MAAM,CAAC,MAAzB;;AAEA,UAAK,IAAL;;AAdsC;AAevC;AAED;;;;;AAzBF;AAAA;AAAA,2BA4BM;AACF,UAAI,CAAC,KAAK,QAAL,CAAL,EAAqB;AACnB,aAAK,QAAL,IAAiB,IAAjB;AACA,aAAK,iBAAL,EAAwB;AAAC,UAAA,MAAM,EAAE;AAAT,SAAxB;AACD;AACF;AAED;;;;AAnCF;AAAA;AAAA,2BAsCM;AACF,UAAI,KAAK,QAAL,CAAJ,EAAoB;AAClB,aAAK,QAAL,IAAiB,KAAjB;AACA,aAAK,iBAAL,EAAwB;AAAC,UAAA,MAAM,EAAE;AAAT,SAAxB;AACD;AACF;AAED;;;;AA7CF;AAAA;AAAA,8BAgDS;AACL,WAAK,KAAL,EAAY,mBAAZ,CAAgC,YAAhC,EAA8C,KAAK,kBAAL,CAA9C;AACD;AAED;;;;AApDF;AAAA;AAAA,gCAuDW;AACP,WAAK,eAAL;AACD;AAED;;;;;AA3DF;AAAA;AAAA,gCA+DW;AACP,UAAI,KAAK,eAAL,IAAwB,CAA5B,EAA+B;AAC7B,UAAE,KAAK,eAAL,CAAF;AACD;;AACD,aAAO,KAAK,eAAL,MAA0B,CAAjC;AACD;AAED;;;;;AAtEF;AAAA;AAAA,mCA0EiB,QA1EjB,EA0EkC;AAC9B,UAAI,QAAQ,IAAI,IAAhB,EACE;AACF,UAAM,aAAa,GAAG,gBAAgB,CAAC,QAAD,CAAhB,CAA2B,CAA3B,EAA8B,KAApD;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,EAAE,CAAzB,EAA4B;AAC1B,aAAK,QAAL,CAAc,YAAd,CACI,CADJ,EACO,aAAa,CAAC,aAAa,CAAC,CAAD,CAAd,CAAb,CAAmD,MAD1D;AAED;AACF;AAED;;;;;AApFF;AAAA;AAAA,iCAwFe,MAxFf,EAwF8B;AAC1B,UAAI,MAAM,IAAI,IAAd,EACE;AACF,UAAM,WAAW,GAAG,gBAAgB,CAAC,MAAD,CAAhB,CAAyB,CAAzB,EAA4B,KAAhD;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,EAAE,CAAzB,EAA4B;AAC1B,aAAK,MAAL,CAAY,YAAZ,CACI,CADJ,EACO,aAAa,CAAC,WAAW,CAAC,CAAD,CAAZ,CAAb,CAAiD,MADxD;AAED;AACF;AAhGH;AAAA;AAAA,2BAkGS,OAlGT,EAkGwB;AACpB,WAAK,MAAL,EAAa,KAAb,CAAmB,SAAnB,oBAAyC,OAAzC;AACD;AApGH;AAAA,UAsGW,EAAA,GApGD,QAoGC,EApGO,EAAA,GACR,eAmGC,EAnGc,EAAA,GACf,MAkGC,EAlGK,EAAA,GACN,KAiGC,EAjGI,EAAA,GACL,kBAgGC,EAAC,iBAtGZ;AAAA,gCAsG0D;AAAA;;AAAA,UAA1B,MAA0B,QAA1B,MAA0B;;AACtD;AACA,UAAI,KAAK,QAAL,CAAJ,EAAoB;AAClB,aAAK,OAAL,CAAa,SAAb,CAAuB,MAAvB,CAA8B,MAA9B;AACD,OAFD,MAEO;AACL,aAAK,OAAL,CAAa,SAAb,CAAuB,GAAvB,CAA2B,MAA3B;AACD,OANqD,CAQtD;AACA;;;AACA,WAAK,KAAL,EAAY,aAAZ,GAA4B,OAA5B,CAAoC,UAAC,IAAD,EAAS;AAC3C,YAAI,IAAI,CAAC,QAAL,KAAkB,IAAI,CAAC,YAA3B,EAAyC;AACvC;AACD;;AAED,YAAM,OAAO,GAAG,IAAhB,CAL2C,CAM3C;;AACA,YAAM,mBAAmB,GAAG,OAAO,CAAC,OAAR,CAAgB,mBAA5C;;AAEA,YAAI,mBAAmB,IAAI,IAA3B,EAAiC;AAC/B,cAAM,aAAa,kBAAW,mBAAX,CAAnB,CAD+B,CAG/B;;AACA,cAAI,MAAI,CAAC,QAAD,CAAR,EAAoB;AAClB,YAAA,OAAO,CAAC,YAAR,CAAqB,aAArB,EAAoC,EAApC;AACD,WAFD,MAEO;AACL,YAAA,OAAO,CAAC,eAAR,CAAwB,aAAxB;AACD;AACF;;AAED,YAAI,MAAJ,EAAY;AACV,UAAA,OAAO,CAAC,aAAR,CAAsB,IAAI,WAAJ,CAAgB,oBAAhB,EAAsC;AAC1D,YAAA,MAAM,EAAE;AACN,cAAA,OAAO,EAAE,MAAI,CAAC,QAAD;AADP;AADkD,WAAtC,CAAtB;AAKD;AACF,OA3BD;AA4BD;AA5IH;AAAA,SA8IY,aA9IZ;AAAA,4BA8I0B;AACtB,WAAK,iBAAL,EAAwB;AAAC,QAAA,MAAM,EAAE;AAAT,OAAxB;AACD;AAhJH;;AAAA;AAAA,EAA6B,WAA7B","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Vector3} from 'three';\nimport {CSS2DObject} from 'three/examples/jsm/renderers/CSS2DRenderer.js';\nimport {normalizeUnit} from '../styles/conversions.js';\nimport {NumberNode, parseExpressions} from '../styles/parsers.js';\n\nexport interface HotspotVisibilityDetails {\n  visible: boolean;\n}\n\n/**\n * Hotspots are configured by slot name, and this name must begin with \"hotspot\"\n * to be recognized. The position and normal strings are in the form of the\n * camera-target attribute and default to \"0m 0m 0m\" and \"0m 1m 0m\",\n * respectively.\n */\nexport interface HotspotConfiguration {\n  name: string;\n  position?: string;\n  normal?: string;\n}\n\nconst $slot = Symbol('slot');\nconst $pivot = Symbol('pivot');\nconst $referenceCount = Symbol('referenceCount');\nconst $updateVisibility = Symbol('updateVisibility');\nconst $visible = Symbol('visible');\n\nconst $onSlotchange = Symbol('onSlotchange');\nconst $slotchangeHandler = Symbol('slotchangeHandler');\n\n/**\n * The Hotspot object is a reference-counted slot. If decrement() returns true,\n * it should be removed from the tree so it can be garbage-collected.\n */\nexport class Hotspot extends CSS2DObject {\n  public normal: Vector3 = new Vector3(0, 1, 0);\n  private[$visible] = false;\n  private[$referenceCount] = 1;\n  private[$pivot] = document.createElement('div');\n  private[$slot]: HTMLSlotElement = document.createElement('slot');\n  private[$slotchangeHandler] = () => this[$onSlotchange]();\n\n  constructor(config: HotspotConfiguration) {\n    super(document.createElement('div'));\n\n    this.element.classList.add('annotation-wrapper');\n\n    this[$slot].name = config.name;\n    this[$slot].addEventListener('slotchange', this[$slotchangeHandler]);\n\n    this.element.appendChild(this[$pivot]);\n    this[$pivot].appendChild(this[$slot]);\n\n    this.updatePosition(config.position);\n    this.updateNormal(config.normal);\n\n    this.show();\n  }\n\n  /**\n   * Sets the hotspot to be in the highly visible foreground state.\n   */\n  show() {\n    if (!this[$visible]) {\n      this[$visible] = true;\n      this[$updateVisibility]({notify: true});\n    }\n  }\n\n  /**\n   * Sets the hotspot to be in the diminished background state.\n   */\n  hide() {\n    if (this[$visible]) {\n      this[$visible] = false;\n      this[$updateVisibility]({notify: true});\n    }\n  }\n\n  /**\n   * Cleans up the held references of this Hotspot when it is done being used.\n   */\n  dispose() {\n    this[$slot].removeEventListener('slotchange', this[$slotchangeHandler]);\n  }\n\n  /**\n   * Call this when adding elements to the same slot to keep track.\n   */\n  increment() {\n    this[$referenceCount]++;\n  }\n\n  /**\n   * Call this when removing elements from the slot; returns true when the slot\n   * is unused.\n   */\n  decrement(): boolean {\n    if (this[$referenceCount] > 0) {\n      --this[$referenceCount];\n    }\n    return this[$referenceCount] === 0;\n  }\n\n  /**\n   * Change the position of the hotspot to the input string, in the same format\n   * as the data-position attribute.\n   */\n  updatePosition(position?: string) {\n    if (position == null)\n      return;\n    const positionNodes = parseExpressions(position)[0].terms;\n    for (let i = 0; i < 3; ++i) {\n      this.position.setComponent(\n          i, normalizeUnit(positionNodes[i] as NumberNode<'m'>).number);\n    }\n  }\n\n  /**\n   * Change the hotspot's normal to the input string, in the same format as the\n   * data-normal attribute.\n   */\n  updateNormal(normal?: string) {\n    if (normal == null)\n      return;\n    const normalNodes = parseExpressions(normal)[0].terms;\n    for (let i = 0; i < 3; ++i) {\n      this.normal.setComponent(\n          i, normalizeUnit(normalNodes[i] as NumberNode<'m'>).number);\n    }\n  }\n\n  orient(radians: number) {\n    this[$pivot].style.transform = `rotate(${radians}rad)`;\n  }\n\n  protected[$updateVisibility]({notify}: {notify: boolean}) {\n    // NOTE: IE11 doesn't support a second arg for classList.toggle\n    if (this[$visible]) {\n      this.element.classList.remove('hide');\n    } else {\n      this.element.classList.add('hide');\n    }\n\n    // NOTE: ShadyDOM doesn't support slot.assignedElements, otherwise we could\n    // use that here.\n    this[$slot].assignedNodes().forEach((node) => {\n      if (node.nodeType !== Node.ELEMENT_NODE) {\n        return;\n      }\n\n      const element = node as HTMLElement;\n      // Visibility attribute can be configured per-node in the hotspot:\n      const visibilityAttribute = element.dataset.visibilityAttribute;\n\n      if (visibilityAttribute != null) {\n        const attributeName = `data-${visibilityAttribute}`;\n\n        // NOTE: IE11 doesn't support toggleAttribute\n        if (this[$visible]) {\n          element.setAttribute(attributeName, '');\n        } else {\n          element.removeAttribute(attributeName);\n        }\n      }\n\n      if (notify) {\n        element.dispatchEvent(new CustomEvent('hotspot-visibility', {\n          detail: {\n            visible: this[$visible],\n          },\n        }));\n      }\n    });\n  }\n\n  protected[$onSlotchange]() {\n    this[$updateVisibility]({notify: false});\n  }\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}