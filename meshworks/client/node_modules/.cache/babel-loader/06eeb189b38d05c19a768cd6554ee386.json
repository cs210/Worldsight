{"ast":null,"code":"import _toConsumableArray from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _getPrototypeOf from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _createClass from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { $relatedObject, ThreeDOMElement } from './three-dom-element.js';\nvar $threeMaterial = Symbol('threeMaterial');\n/**\n * PBR material properties facade implementation for Three.js materials\n */\n\nexport var PBRMetallicRoughness = /*#__PURE__*/function (_ThreeDOMElement) {\n  _inherits(PBRMetallicRoughness, _ThreeDOMElement);\n\n  var _super = _createSuper(PBRMetallicRoughness);\n\n  _createClass(PBRMetallicRoughness, [{\n    key: $threeMaterial,\n    get: function get() {\n      return this[$relatedObject];\n    }\n  }]);\n\n  function PBRMetallicRoughness(graft, material) {\n    _classCallCheck(this, PBRMetallicRoughness);\n\n    return _super.call(this, graft, material);\n  }\n\n  _createClass(PBRMetallicRoughness, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      var serialized = _get(_getPrototypeOf(PBRMetallicRoughness.prototype), \"toJSON\", this).call(this);\n\n      serialized.baseColorFactor = this.baseColorFactor;\n      return serialized;\n    }\n  }, {\n    key: \"baseColorFactor\",\n    get: function get() {\n      var material = this[$threeMaterial];\n\n      if (material.color) {\n        return [].concat(_toConsumableArray(material.color.toArray()), [material.opacity]);\n      } else {\n        return [1, 1, 1, 1];\n      }\n    },\n    set: function set(value) {\n      this[$threeMaterial].color.fromArray(value);\n      this[$threeMaterial].opacity = value[3];\n    }\n  }]);\n\n  return PBRMetallicRoughness;\n}(ThreeDOMElement);","map":{"version":3,"sources":["../../../src/facade/three-js/pbr-metallic-roughness.ts"],"names":[],"mappings":";;;;;;;;AAAA;;;;;;;;;;;;;;AAuBA,SAAQ,cAAR,EAAwB,eAAxB,QAA8C,wBAA9C;AAEA,IAAM,cAAc,GAAG,MAAM,CAAC,eAAD,CAA7B;AAEA;;;;AAGA,WAAa,oBAAb;AAAA;;AAAA;;AAAA;AAAA,SAEc,cAFd;AAAA,wBAE6B;AACzB,aAAO,KAAK,cAAL,CAAP;AACD;AAJH;;AAME,gCAAY,KAAZ,EAA+B,QAA/B,EAAiD;AAAA;;AAAA,6BACzC,KADyC,EAClC,QADkC;AAEhD;;AARH;AAAA;AAAA,6BAwBQ;AACJ,UAAM,UAAU,mFAAhB;;AACA,MAAA,UAAU,CAAC,eAAX,GAA6B,KAAK,eAAlC;AACA,aAAO,UAAP;AACD;AA5BH;AAAA;AAAA,wBAUqB;AACjB,UAAM,QAAQ,GAAG,KAAK,cAAL,CAAjB;;AACA,UAAI,QAAQ,CAAC,KAAb,EAAoB;AAClB,4CAAW,QAAQ,CAAC,KAAT,CAAe,OAAf,EAAX,IAAqC,QAAQ,CAAC,OAA9C;AACD,OAFD,MAEO;AACL,eAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAP;AACD;AACF,KAjBH;AAAA,sBAmBsB,KAnBtB,EAmBiC;AAC7B,WAAK,cAAL,EAAqB,KAArB,CAA2B,SAA3B,CAAqC,KAArC;AACA,WAAK,cAAL,EAAqB,OAArB,GAA+B,KAAK,CAAC,CAAD,CAApC;AACD;AAtBH;;AAAA;AAAA,EAA0C,eAA1C","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Material} from 'three';\nimport {MeshStandardMaterial} from 'three';\n\nimport {RGBA} from '../../api.js';\nimport {SerializedPBRMetallicRoughness} from '../../protocol.js';\nimport {PBRMetallicRoughness as PBRMetallicRoughnessInterface} from '../api.js';\n\nimport {ModelGraft} from './model-graft.js';\nimport {$relatedObject, ThreeDOMElement} from './three-dom-element.js';\n\nconst $threeMaterial = Symbol('threeMaterial');\n\n/**\n * PBR material properties facade implementation for Three.js materials\n */\nexport class PBRMetallicRoughness extends ThreeDOMElement implements\n    PBRMetallicRoughnessInterface {\n  private get[$threeMaterial](): MeshStandardMaterial {\n    return this[$relatedObject] as MeshStandardMaterial;\n  }\n\n  constructor(graft: ModelGraft, material: Material) {\n    super(graft, material);\n  }\n\n  get baseColorFactor(): RGBA {\n    const material = this[$threeMaterial];\n    if (material.color) {\n      return [...material.color.toArray(), material.opacity] as RGBA;\n    } else {\n      return [1, 1, 1, 1];\n    }\n  }\n\n  set baseColorFactor(value: RGBA) {\n    this[$threeMaterial].color.fromArray(value);\n    this[$threeMaterial].opacity = value[3];\n  }\n\n  toJSON(): SerializedPBRMetallicRoughness {\n    const serialized: Partial<SerializedPBRMetallicRoughness> = super.toJSON();\n    serialized.baseColorFactor = this.baseColorFactor;\n    return serialized as SerializedPBRMetallicRoughness;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}