{"ast":null,"code":"import _classCallCheck from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _getPrototypeOf from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { property } from 'lit-element';\nimport { $renderer, $scene, $tick } from '../model-viewer-base.js'; // How much the model will rotate per\n// second in radians:\n\nvar ROTATION_SPEED = Math.PI / 32;\nexport var AUTO_ROTATE_DELAY_DEFAULT = 3000;\nvar $autoRotateStartTime = Symbol('autoRotateStartTime');\nvar $cameraChangeHandler = Symbol('cameraChangeHandler');\nvar $onCameraChange = Symbol('onCameraChange');\nexport var StagingMixin = function StagingMixin(ModelViewerElement) {\n  var _a, _b;\n\n  var StagingModelViewerElement = /*#__PURE__*/function (_ModelViewerElement) {\n    _inherits(StagingModelViewerElement, _ModelViewerElement);\n\n    var _super = _createSuper(StagingModelViewerElement);\n\n    function StagingModelViewerElement() {\n      var _this;\n\n      _classCallCheck(this, StagingModelViewerElement);\n\n      _this = _super.apply(this, arguments);\n      _this.autoRotate = false;\n      _this.autoRotateDelay = AUTO_ROTATE_DELAY_DEFAULT;\n      _this[_a] = performance.now();\n\n      _this[_b] = function (event) {\n        return _this[$onCameraChange](event);\n      };\n\n      return _this;\n    }\n\n    _createClass(StagingModelViewerElement, [{\n      key: \"connectedCallback\",\n      value: function connectedCallback() {\n        _get(_getPrototypeOf(StagingModelViewerElement.prototype), \"connectedCallback\", this).call(this);\n\n        this.addEventListener('camera-change', this[$cameraChangeHandler]);\n        this[$autoRotateStartTime] = performance.now();\n      }\n    }, {\n      key: \"disconnectedCallback\",\n      value: function disconnectedCallback() {\n        _get(_getPrototypeOf(StagingModelViewerElement.prototype), \"disconnectedCallback\", this).call(this);\n\n        this.removeEventListener('camera-change', this[$cameraChangeHandler]);\n        this[$autoRotateStartTime] = performance.now();\n      }\n    }, {\n      key: \"updated\",\n      value: function updated(changedProperties) {\n        _get(_getPrototypeOf(StagingModelViewerElement.prototype), \"updated\", this).call(this, changedProperties);\n\n        if (changedProperties.has('autoRotate')) {\n          this[$autoRotateStartTime] = performance.now();\n        }\n      }\n    }, {\n      key: (_a = $autoRotateStartTime, _b = $cameraChangeHandler, $tick),\n      value: function value(time, delta) {\n        _get(_getPrototypeOf(StagingModelViewerElement.prototype), $tick, this).call(this, time, delta);\n\n        if (!this.autoRotate || !this.modelIsVisible || this[$renderer].isPresenting) {\n          return;\n        }\n\n        var rotationDelta = Math.min(delta, time - this[$autoRotateStartTime] - this.autoRotateDelay);\n\n        if (rotationDelta > 0) {\n          this[$scene].yaw = this.turntableRotation + ROTATION_SPEED * rotationDelta * 0.001;\n        }\n      }\n    }, {\n      key: $onCameraChange,\n      value: function value(event) {\n        if (!this.autoRotate) {\n          return;\n        }\n\n        if (event.detail.source === 'user-interaction') {\n          this[$autoRotateStartTime] = performance.now();\n        }\n      }\n    }, {\n      key: \"resetTurntableRotation\",\n      value: function resetTurntableRotation() {\n        this[$scene].yaw = 0;\n      }\n    }, {\n      key: \"turntableRotation\",\n      get: function get() {\n        return this[$scene].yaw;\n      }\n    }]);\n\n    return StagingModelViewerElement;\n  }(ModelViewerElement);\n\n  __decorate([property({\n    type: Boolean,\n    attribute: 'auto-rotate'\n  })], StagingModelViewerElement.prototype, \"autoRotate\", void 0);\n\n  __decorate([property({\n    type: Number,\n    attribute: 'auto-rotate-delay'\n  })], StagingModelViewerElement.prototype, \"autoRotateDelay\", void 0);\n\n  return StagingModelViewerElement;\n};","map":{"version":3,"sources":["../../src/features/staging.ts"],"names":[],"mappings":"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","sourcesContent":["\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {property} from 'lit-element';\n\nimport ModelViewerElementBase, {$renderer, $scene, $tick} from '../model-viewer-base.js';\nimport {Constructor} from '../utilities.js';\n\nimport {CameraChangeDetails} from './controls.js';\n\n// How much the model will rotate per\n// second in radians:\nconst ROTATION_SPEED = Math.PI / 32;\nexport const AUTO_ROTATE_DELAY_DEFAULT = 3000;\n\nconst $autoRotateStartTime = Symbol('autoRotateStartTime');\nconst $cameraChangeHandler = Symbol('cameraChangeHandler');\nconst $onCameraChange = Symbol('onCameraChange');\n\nexport declare interface StagingInterface {\n  autoRotate: boolean;\n  autoRotateDelay: number;\n  readonly turntableRotation: number;\n  resetTurntableRotation(): void;\n}\n\nexport const StagingMixin = <T extends Constructor<ModelViewerElementBase>>(\n    ModelViewerElement: T): Constructor<StagingInterface>&T => {\n  class StagingModelViewerElement extends ModelViewerElement {\n    @property({type: Boolean, attribute: 'auto-rotate'})\n    autoRotate: boolean = false;\n\n    @property({type: Number, attribute: 'auto-rotate-delay'})\n    autoRotateDelay: number = AUTO_ROTATE_DELAY_DEFAULT;\n\n    private[$autoRotateStartTime] = performance.now();\n    private[$cameraChangeHandler] = (event: CustomEvent<CameraChangeDetails>) =>\n        this[$onCameraChange](event);\n\n    connectedCallback() {\n      super.connectedCallback();\n      this.addEventListener(\n          'camera-change', this[$cameraChangeHandler] as EventListener);\n      this[$autoRotateStartTime] = performance.now();\n    }\n\n    disconnectedCallback() {\n      super.disconnectedCallback();\n      this.removeEventListener(\n          'camera-change', this[$cameraChangeHandler] as EventListener);\n      this[$autoRotateStartTime] = performance.now();\n    }\n\n    updated(changedProperties: Map<string, any>) {\n      super.updated(changedProperties);\n\n      if (changedProperties.has('autoRotate')) {\n        this[$autoRotateStartTime] = performance.now();\n      }\n    }\n\n    [$tick](time: number, delta: number) {\n      super[$tick](time, delta);\n\n      if (!this.autoRotate || !this.modelIsVisible ||\n          this[$renderer].isPresenting) {\n        return;\n      }\n\n      const rotationDelta = Math.min(\n          delta, time - this[$autoRotateStartTime] - this.autoRotateDelay);\n\n      if (rotationDelta > 0) {\n        this[$scene].yaw =\n            this.turntableRotation + ROTATION_SPEED * rotationDelta * 0.001;\n      }\n    }\n\n    [$onCameraChange](event: CustomEvent<CameraChangeDetails>) {\n      if (!this.autoRotate) {\n        return;\n      }\n\n      if (event.detail.source === 'user-interaction') {\n        this[$autoRotateStartTime] = performance.now();\n      }\n    }\n\n    get turntableRotation(): number {\n      return this[$scene].yaw;\n    }\n\n    resetTurntableRotation() {\n      this[$scene].yaw = 0;\n    }\n  }\n\n  return StagingModelViewerElement;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}