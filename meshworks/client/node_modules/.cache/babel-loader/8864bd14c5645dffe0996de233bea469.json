{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _regeneratorRuntime from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _a, _b;\n\nimport { ACESFilmicToneMapping, EventDispatcher, GammaEncoding, PCFSoftShadowMap, WebGLRenderer } from 'three';\nimport { IS_WEBXR_AR_CANDIDATE, USE_OFFSCREEN_CANVAS } from '../constants.js';\nimport { $tick } from '../model-viewer-base.js';\nimport { isDebugMode, resolveDpr } from '../utilities.js';\nimport { ARRenderer } from './ARRenderer.js';\nimport { Debugger } from './Debugger.js';\nimport TextureUtils from './TextureUtils.js';\nimport * as WebGLUtils from './WebGLUtils.js';\nexport var $arRenderer = Symbol('arRenderer');\nvar $onWebGLContextLost = Symbol('onWebGLContextLost');\nvar $webGLContextLostHandler = Symbol('webGLContextLostHandler');\nvar $singleton = Symbol('singleton');\n/**\n * Registers canvases with Canvas2DRenderingContexts and renders them\n * all in the same WebGLRenderingContext, spitting out textures to apply\n * to the canvases. Creates a fullscreen WebGL canvas that is not added\n * to the DOM, and on each frame, renders each registered canvas on a portion\n * of the WebGL canvas, and applies the texture on the registered canvas.\n *\n * In the future, can use ImageBitmapRenderingContext instead of\n * Canvas2DRenderingContext if supported for cheaper transfering of\n * the texture.\n */\n\nexport var Renderer = /*#__PURE__*/function (_EventDispatcher) {\n  _inherits(Renderer, _EventDispatcher);\n\n  var _super = _createSuper(Renderer);\n\n  function Renderer(options) {\n    var _this;\n\n    _classCallCheck(this, Renderer);\n\n    _this = _super.call(this);\n    _this.width = 0;\n    _this.height = 0;\n    _this.debugger = null;\n    _this.scenes = new Set();\n\n    _this[_b] = function (event) {\n      return _this[$onWebGLContextLost](event);\n    };\n\n    var webGlOptions = {\n      alpha: true,\n      antialias: true\n    }; // Only enable certain options when Web XR capabilities are detected:\n\n    if (IS_WEBXR_AR_CANDIDATE) {\n      Object.assign(webGlOptions, {\n        alpha: true,\n        preserveDrawingBuffer: true\n      });\n    }\n\n    _this.canvasElement = document.createElement('canvas');\n    _this.canvas3D = USE_OFFSCREEN_CANVAS ? _this.canvasElement.transferControlToOffscreen() : _this.canvasElement;\n\n    _this.canvas3D.addEventListener('webglcontextlost', _this[$webGLContextLostHandler]);\n\n    try {\n      // Need to support both 'webgl' and 'experimental-webgl' (IE11).\n      _this.context3D = WebGLUtils.getContext(_this.canvas3D, webGlOptions); // Patch the gl context's extension functions before passing\n      // it to three.\n\n      WebGLUtils.applyExtensionCompatibility(_this.context3D);\n      _this.threeRenderer = new WebGLRenderer({\n        canvas: _this.canvas3D,\n        context: _this.context3D\n      });\n      _this.threeRenderer.autoClear = true;\n      _this.threeRenderer.outputEncoding = GammaEncoding;\n      _this.threeRenderer.gammaFactor = 2.2;\n      _this.threeRenderer.physicallyCorrectLights = true;\n\n      _this.threeRenderer.setPixelRatio(resolveDpr());\n\n      _this.threeRenderer.shadowMap.enabled = true;\n      _this.threeRenderer.shadowMap.type = PCFSoftShadowMap;\n      _this.threeRenderer.shadowMap.autoUpdate = false;\n      _this.debugger = options != null && !!options.debug ? new Debugger(_assertThisInitialized(_this)) : null;\n      _this.threeRenderer.debug = {\n        checkShaderErrors: !!_this.debugger\n      }; // ACESFilmicToneMapping appears to be the most \"saturated\",\n      // and similar to Filament's gltf-viewer.\n\n      _this.threeRenderer.toneMapping = ACESFilmicToneMapping;\n    } catch (error) {\n      _this.context3D = null;\n      console.warn(error);\n    }\n\n    _this[$arRenderer] = new ARRenderer(_assertThisInitialized(_this));\n    _this.textureUtils = _this.canRender ? new TextureUtils(_this.threeRenderer) : null;\n\n    _this.setRendererSize(1, 1);\n\n    _this.lastTick = performance.now();\n    return _this;\n  }\n\n  _createClass(Renderer, [{\n    key: \"setRendererSize\",\n    value: function setRendererSize(width, height) {\n      if (this.canRender) {\n        this.threeRenderer.setSize(width, height, false);\n      }\n\n      this.width = width;\n      this.height = height;\n    }\n  }, {\n    key: \"registerScene\",\n    value: function registerScene(scene) {\n      var _this2 = this;\n\n      this.scenes.add(scene);\n\n      if (this.canRender && this.scenes.size > 0) {\n        this.threeRenderer.setAnimationLoop(function (time) {\n          return _this2.render(time);\n        });\n      }\n\n      if (this.debugger != null) {\n        this.debugger.addScene(scene);\n      }\n    }\n  }, {\n    key: \"unregisterScene\",\n    value: function unregisterScene(scene) {\n      this.scenes.delete(scene);\n\n      if (this.canRender && this.scenes.size === 0) {\n        this.threeRenderer.setAnimationLoop(null);\n      }\n\n      if (this.debugger != null) {\n        this.debugger.removeScene(scene);\n      }\n    }\n  }, {\n    key: \"supportsPresentation\",\n    value: function () {\n      var _supportsPresentation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", this.canRender && this[$arRenderer].supportsPresentation());\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function supportsPresentation() {\n        return _supportsPresentation.apply(this, arguments);\n      }\n\n      return supportsPresentation;\n    }()\n  }, {\n    key: \"present\",\n    value: function () {\n      var _present = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(scene) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return this[$arRenderer].present(scene);\n\n              case 3:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 6:\n                _context2.prev = 6;\n                _context2.t0 = _context2[\"catch\"](0);\n                _context2.next = 10;\n                return this[$arRenderer].stopPresenting();\n\n              case 10:\n                throw _context2.t0;\n\n              case 11:\n                _context2.prev = 11;\n                // NOTE(cdata): Setting width and height to 0 will have the effect of\n                // invoking a `setSize` the next time we render in this threeRenderer\n                this.width = this.height = 0;\n                return _context2.finish(11);\n\n              case 14:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 6, 11, 14]]);\n      }));\n\n      function present(_x) {\n        return _present.apply(this, arguments);\n      }\n\n      return present;\n    }()\n  }, {\n    key: \"stopPresenting\",\n    value: function stopPresenting() {\n      return this[$arRenderer].stopPresenting();\n    }\n  }, {\n    key: \"preRender\",\n\n    /**\n     * This method takes care of updating the element and renderer state based on\n     * the time that has passed since the last rendered frame.\n     */\n    value: function preRender(scene, t, delta) {\n      var element = scene.element,\n          exposure = scene.exposure,\n          model = scene.model;\n      element[$tick](t, delta);\n      var exposureIsNumber = typeof exposure === 'number' && !self.isNaN(exposure);\n      this.threeRenderer.toneMappingExposure = exposureIsNumber ? exposure : 1.0;\n\n      if (model.updateShadow()) {\n        this.threeRenderer.shadowMap.needsUpdate = true;\n      }\n    }\n    /**\n     * Expands the size of the renderer to the max of its current size and the\n     * incoming size.\n     */\n\n  }, {\n    key: \"expandTo\",\n    value: function expandTo(width, height) {\n      var maxWidth = Math.max(width, this.width);\n      var maxHeight = Math.max(height, this.height);\n      this.setRendererSize(maxWidth, maxHeight);\n      this.canvasElement.style.width = \"\".concat(maxWidth, \"px\");\n      this.canvasElement.style.height = \"\".concat(maxHeight, \"px\");\n\n      var _iterator = _createForOfIteratorHelper(this.scenes),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var scene = _step.value;\n          scene.canvas.width = maxWidth;\n          scene.canvas.height = maxHeight;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render(t) {\n      if (!this.canRender || this.isPresenting) {\n        return;\n      }\n\n      var delta = t - this.lastTick;\n      var dpr = resolveDpr();\n\n      if (dpr !== this.threeRenderer.getPixelRatio()) {\n        this.threeRenderer.setPixelRatio(dpr);\n        this.canvasElement.style.width = \"\".concat(this.width, \"px\");\n        this.canvasElement.style.height = \"\".concat(this.height, \"px\");\n\n        var _iterator2 = _createForOfIteratorHelper(this.scenes),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var scene = _step2.value;\n            scene.isDirty = true;\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n\n      var _iterator3 = _createForOfIteratorHelper(this.scenes),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _scene = _step3.value;\n\n          if (!_scene.visible || _scene.paused) {\n            continue;\n          }\n\n          this.preRender(_scene, t, delta);\n\n          if (!_scene.isDirty) {\n            continue;\n          }\n\n          var width = _scene.width,\n              height = _scene.height;\n\n          if (width > this.width || height > this.height) {\n            var maxWidth = Math.max(width, this.width);\n            var maxHeight = Math.max(height, this.height);\n            this.setRendererSize(maxWidth, maxHeight);\n          } // Need to set the render target in order to prevent\n          // clearing the depth from a different buffer -- possibly\n          // from something in\n\n\n          this.threeRenderer.setRenderTarget(null);\n          this.threeRenderer.setViewport(0, this.height - height, width, height);\n          this.threeRenderer.render(_scene, _scene.getCamera());\n\n          if (!this.hasOnlyOneScene) {\n            if (_scene.context == null) {\n              _scene.createContext();\n            }\n\n            if (USE_OFFSCREEN_CANVAS) {\n              var contextBitmap = _scene.context;\n              var bitmap = this.canvas3D.transferToImageBitmap();\n              contextBitmap.transferFromImageBitmap(bitmap);\n            } else {\n              var context2D = _scene.context;\n              context2D.clearRect(0, 0, width, height);\n              context2D.drawImage(this.threeRenderer.domElement, 0, 0, width * dpr, height * dpr, 0, 0, width, height);\n            }\n          }\n\n          _scene.isDirty = false;\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      this.lastTick = t;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      if (this.textureUtils != null) {\n        this.textureUtils.dispose();\n      }\n\n      if (this.threeRenderer != null) {\n        this.threeRenderer.dispose();\n      }\n\n      this.textureUtils = null;\n      this.threeRenderer = null;\n      this.scenes.clear();\n      this.canvas3D.removeEventListener('webglcontextlost', this[$webGLContextLostHandler]);\n    }\n  }, {\n    key: (_a = $singleton, _b = $webGLContextLostHandler, $onWebGLContextLost),\n    value: function value(event) {\n      this.dispatchEvent({\n        type: 'contextlost',\n        sourceEvent: event\n      });\n    }\n  }, {\n    key: \"canRender\",\n    get: function get() {\n      return this.threeRenderer != null && this.context3D != null;\n    }\n  }, {\n    key: \"hasOnlyOneScene\",\n    get: function get() {\n      return this.scenes.size === 1;\n    }\n  }, {\n    key: \"presentedScene\",\n    get: function get() {\n      return this[$arRenderer].presentedScene;\n    }\n  }, {\n    key: \"isPresenting\",\n    get: function get() {\n      return this[$arRenderer] != null && this[$arRenderer].isPresenting;\n    }\n  }], [{\n    key: \"resetSingleton\",\n    value: function resetSingleton() {\n      this[$singleton].dispose();\n      this[$singleton] = new Renderer({\n        debug: isDebugMode()\n      });\n    }\n  }, {\n    key: \"singleton\",\n    get: function get() {\n      return this[$singleton];\n    }\n  }]);\n\n  return Renderer;\n}(EventDispatcher);\nRenderer[_a] = new Renderer({\n  debug: isDebugMode()\n});","map":{"version":3,"sources":["../../src/three-components/Renderer.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ACESFilmicToneMapping, Event, EventDispatcher, GammaEncoding, PCFSoftShadowMap, WebGLRenderer} from 'three';\n\nimport {IS_WEBXR_AR_CANDIDATE, USE_OFFSCREEN_CANVAS} from '../constants.js';\nimport {$tick} from '../model-viewer-base.js';\nimport {isDebugMode, resolveDpr} from '../utilities.js';\n\nimport {ARRenderer} from './ARRenderer.js';\nimport {Debugger} from './Debugger.js';\nimport {ModelScene} from './ModelScene.js';\nimport TextureUtils from './TextureUtils.js';\nimport * as WebGLUtils from './WebGLUtils.js';\n\nexport interface RendererOptions {\n  debug?: boolean;\n}\n\nexport interface ContextLostEvent extends Event {\n  type: 'contextlost';\n  sourceEvent: WebGLContextEvent;\n}\n\nexport const $arRenderer = Symbol('arRenderer');\n\nconst $onWebGLContextLost = Symbol('onWebGLContextLost');\nconst $webGLContextLostHandler = Symbol('webGLContextLostHandler');\nconst $singleton = Symbol('singleton');\n\n/**\n * Registers canvases with Canvas2DRenderingContexts and renders them\n * all in the same WebGLRenderingContext, spitting out textures to apply\n * to the canvases. Creates a fullscreen WebGL canvas that is not added\n * to the DOM, and on each frame, renders each registered canvas on a portion\n * of the WebGL canvas, and applies the texture on the registered canvas.\n *\n * In the future, can use ImageBitmapRenderingContext instead of\n * Canvas2DRenderingContext if supported for cheaper transfering of\n * the texture.\n */\nexport class Renderer extends EventDispatcher {\n  static[$singleton] = new Renderer({debug: isDebugMode()});\n\n  static get singleton() {\n    return this[$singleton];\n  }\n\n  static resetSingleton() {\n    this[$singleton].dispose();\n    this[$singleton] = new Renderer({debug: isDebugMode()});\n  }\n\n  public threeRenderer!: WebGLRenderer;\n  public context3D!: WebGLRenderingContext|null;\n  public canvasElement: HTMLCanvasElement;\n  public canvas3D: HTMLCanvasElement|OffscreenCanvas;\n  public textureUtils: TextureUtils|null;\n  public width: number = 0;\n  public height: number = 0;\n\n  protected debugger: Debugger|null = null;\n  private[$arRenderer]: ARRenderer;\n  private scenes: Set<ModelScene> = new Set();\n  private lastTick: number;\n\n  private[$webGLContextLostHandler] = (event: WebGLContextEvent) =>\n      this[$onWebGLContextLost](event);\n\n  get canRender() {\n    return this.threeRenderer != null && this.context3D != null;\n  }\n\n  constructor(options?: RendererOptions) {\n    super();\n\n    const webGlOptions = {alpha: true, antialias: true};\n\n    // Only enable certain options when Web XR capabilities are detected:\n    if (IS_WEBXR_AR_CANDIDATE) {\n      Object.assign(webGlOptions, {alpha: true, preserveDrawingBuffer: true});\n    }\n\n    this.canvasElement = document.createElement('canvas');\n\n    this.canvas3D = USE_OFFSCREEN_CANVAS ?\n        this.canvasElement.transferControlToOffscreen() :\n        this.canvasElement;\n\n    this.canvas3D.addEventListener(\n        'webglcontextlost', this[$webGLContextLostHandler] as EventListener);\n\n    try {\n      // Need to support both 'webgl' and 'experimental-webgl' (IE11).\n      this.context3D = WebGLUtils.getContext(this.canvas3D, webGlOptions);\n\n      // Patch the gl context's extension functions before passing\n      // it to three.\n      WebGLUtils.applyExtensionCompatibility(this.context3D);\n\n      this.threeRenderer = new WebGLRenderer({\n        canvas: this.canvas3D,\n        context: this.context3D,\n      });\n      this.threeRenderer.autoClear = true;\n      this.threeRenderer.outputEncoding = GammaEncoding;\n      this.threeRenderer.gammaFactor = 2.2;\n      this.threeRenderer.physicallyCorrectLights = true;\n      this.threeRenderer.setPixelRatio(resolveDpr());\n      this.threeRenderer.shadowMap.enabled = true;\n      this.threeRenderer.shadowMap.type = PCFSoftShadowMap;\n      this.threeRenderer.shadowMap.autoUpdate = false;\n\n      this.debugger =\n          options != null && !!options.debug ? new Debugger(this) : null;\n      this.threeRenderer.debug = {checkShaderErrors: !!this.debugger};\n\n      // ACESFilmicToneMapping appears to be the most \"saturated\",\n      // and similar to Filament's gltf-viewer.\n      this.threeRenderer.toneMapping = ACESFilmicToneMapping;\n    } catch (error) {\n      this.context3D = null;\n      console.warn(error);\n    }\n\n    this[$arRenderer] = new ARRenderer(this);\n    this.textureUtils =\n        this.canRender ? new TextureUtils(this.threeRenderer) : null;\n\n    this.setRendererSize(1, 1);\n    this.lastTick = performance.now();\n  }\n\n  setRendererSize(width: number, height: number) {\n    if (this.canRender) {\n      this.threeRenderer.setSize(width, height, false);\n    }\n\n    this.width = width;\n    this.height = height;\n  }\n\n  registerScene(scene: ModelScene) {\n    this.scenes.add(scene);\n    if (this.canRender && this.scenes.size > 0) {\n      this.threeRenderer.setAnimationLoop((time: number) => this.render(time));\n    }\n\n    if (this.debugger != null) {\n      this.debugger.addScene(scene);\n    }\n  }\n\n  unregisterScene(scene: ModelScene) {\n    this.scenes.delete(scene);\n    if (this.canRender && this.scenes.size === 0) {\n      (this.threeRenderer.setAnimationLoop as any)(null);\n    }\n\n    if (this.debugger != null) {\n      this.debugger.removeScene(scene);\n    }\n  }\n\n  get hasOnlyOneScene(): boolean {\n    return this.scenes.size === 1;\n  }\n\n  async supportsPresentation() {\n    return this.canRender && this[$arRenderer].supportsPresentation();\n  }\n\n  get presentedScene() {\n    return this[$arRenderer].presentedScene;\n  }\n\n  async present(scene: ModelScene): Promise<void> {\n    try {\n      return await this[$arRenderer].present(scene);\n    } catch (error) {\n      await this[$arRenderer].stopPresenting();\n      throw error;\n    } finally {\n      // NOTE(cdata): Setting width and height to 0 will have the effect of\n      // invoking a `setSize` the next time we render in this threeRenderer\n      this.width = this.height = 0;\n    }\n  }\n\n  stopPresenting(): Promise<void> {\n    return this[$arRenderer].stopPresenting();\n  }\n\n  get isPresenting(): boolean {\n    return this[$arRenderer] != null && this[$arRenderer].isPresenting;\n  }\n\n  /**\n   * This method takes care of updating the element and renderer state based on\n   * the time that has passed since the last rendered frame.\n   */\n  preRender(scene: ModelScene, t: number, delta: number) {\n    const {element, exposure, model} = scene;\n\n    element[$tick](t, delta);\n\n    const exposureIsNumber =\n        typeof exposure === 'number' && !(self as any).isNaN(exposure);\n    this.threeRenderer.toneMappingExposure = exposureIsNumber ? exposure : 1.0;\n\n    if (model.updateShadow()) {\n      this.threeRenderer.shadowMap.needsUpdate = true;\n    }\n  }\n\n  /**\n   * Expands the size of the renderer to the max of its current size and the\n   * incoming size.\n   */\n  expandTo(width: number, height: number) {\n    const maxWidth = Math.max(width, this.width);\n    const maxHeight = Math.max(height, this.height);\n    this.setRendererSize(maxWidth, maxHeight);\n    this.canvasElement.style.width = `${maxWidth}px`;\n    this.canvasElement.style.height = `${maxHeight}px`;\n    for (const scene of this.scenes) {\n      scene.canvas.width = maxWidth;\n      scene.canvas.height = maxHeight;\n    }\n  }\n\n  render(t: number) {\n    if (!this.canRender || this.isPresenting) {\n      return;\n    }\n\n    const delta = t - this.lastTick;\n    const dpr = resolveDpr();\n\n    if (dpr !== this.threeRenderer.getPixelRatio()) {\n      this.threeRenderer.setPixelRatio(dpr);\n      this.canvasElement.style.width = `${this.width}px`;\n      this.canvasElement.style.height = `${this.height}px`;\n      for (const scene of this.scenes) {\n        scene.isDirty = true;\n      }\n    }\n\n    for (const scene of this.scenes) {\n      if (!scene.visible || scene.paused) {\n        continue;\n      }\n\n      this.preRender(scene, t, delta);\n\n      if (!scene.isDirty) {\n        continue;\n      }\n\n      const {width, height} = scene;\n\n      if (width > this.width || height > this.height) {\n        const maxWidth = Math.max(width, this.width);\n        const maxHeight = Math.max(height, this.height);\n        this.setRendererSize(maxWidth, maxHeight);\n      }\n\n      // Need to set the render target in order to prevent\n      // clearing the depth from a different buffer -- possibly\n      // from something in\n      this.threeRenderer.setRenderTarget(null);\n      this.threeRenderer.setViewport(0, this.height - height, width, height);\n      this.threeRenderer.render(scene, scene.getCamera());\n\n      if (!this.hasOnlyOneScene) {\n        if (scene.context == null) {\n          scene.createContext();\n        }\n        if (USE_OFFSCREEN_CANVAS) {\n          const contextBitmap = scene.context as ImageBitmapRenderingContext;\n          const bitmap =\n              (this.canvas3D as OffscreenCanvas).transferToImageBitmap();\n          contextBitmap.transferFromImageBitmap(bitmap);\n        } else {\n          const context2D = scene.context as CanvasRenderingContext2D;\n          context2D.clearRect(0, 0, width, height);\n          context2D.drawImage(\n              this.threeRenderer.domElement,\n              0,\n              0,\n              width * dpr,\n              height * dpr,\n              0,\n              0,\n              width,\n              height);\n        }\n      }\n\n      scene.isDirty = false;\n    }\n    this.lastTick = t;\n  }\n\n  dispose() {\n    if (this.textureUtils != null) {\n      this.textureUtils.dispose();\n    }\n\n    if (this.threeRenderer != null) {\n      this.threeRenderer.dispose();\n    }\n\n    this.textureUtils = null;\n    (this as any).threeRenderer = null;\n\n    this.scenes.clear();\n\n    this.canvas3D.removeEventListener(\n        'webglcontextlost', this[$webGLContextLostHandler] as EventListener);\n  }\n\n  [$onWebGLContextLost](event: WebGLContextEvent) {\n    this.dispatchEvent(\n        {type: 'contextlost', sourceEvent: event} as ContextLostEvent);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}