{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _getPrototypeOf from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _a, _b;\n\nimport { Material } from './material.js';\nimport { ThreeDOMElement } from './three-dom-element.js';\nvar $modelUri = Symbol('modelUri');\nvar $materials = Symbol('materials');\n/**\n * A Model facades the top-level GLTF object returned by Three.js' GLTFLoader.\n * Currently, the model only bothers itself with the materials in the Three.js\n * scene graph.\n */\n\nexport var Model = /*#__PURE__*/function (_ThreeDOMElement) {\n  _inherits(Model, _ThreeDOMElement);\n\n  var _super = _createSuper(Model);\n\n  function Model(graft, modelUri, gltf) {\n    var _this;\n\n    _classCallCheck(this, Model);\n\n    _this = _super.call(this, graft, gltf);\n    _this[_a] = '';\n    _this[_b] = [];\n    _this[$modelUri] = modelUri;\n    var visitedMaterials = new Set();\n    gltf.scene.traverse(function (object3D) {\n      var maybeMesh = object3D;\n      var meshMaterials = [];\n\n      if (maybeMesh.isMesh && maybeMesh.material != null) {\n        meshMaterials = Array.isArray(maybeMesh.material) ? maybeMesh.material : [maybeMesh.material];\n      }\n\n      var _iterator = _createForOfIteratorHelper(meshMaterials),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var material = _step.value;\n\n          if (visitedMaterials.has(material)) {\n            continue;\n          }\n\n          _this[$materials].push(new Material(graft, material));\n\n          visitedMaterials.add(material);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    });\n    return _this;\n  }\n  /**\n   * A flat list of all unique materials found in this scene graph. Materials\n   * are listed in the order they appear during pre-order, depth-first traveral\n   * of the scene graph.\n   *\n   * TODO(#1003): How do we handle non-active scenes?\n   * TODO(#1002): Desctibe and enforce traversal order\n   */\n\n\n  _createClass(Model, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      var serialized = _get(_getPrototypeOf(Model.prototype), \"toJSON\", this).call(this);\n\n      serialized.modelUri = this[$modelUri];\n      serialized.materials = this[$materials].map(function (material) {\n        return material.toJSON();\n      });\n      return serialized;\n    }\n  }, {\n    key: \"materials\",\n    get: function get() {\n      return this[$materials];\n    }\n  }]);\n\n  return Model;\n}(ThreeDOMElement);\n_a = $modelUri, _b = $materials;","map":{"version":3,"sources":["../../../src/facade/three-js/model.ts"],"names":[],"mappings":";;;;;;;;AAAA;;;;;;;;;;;;;;;;AAsBA,SAAQ,QAAR,QAAuB,eAAvB;AAEA,SAAQ,eAAR,QAA8B,wBAA9B;AAGA,IAAM,SAAS,GAAG,MAAM,CAAC,UAAD,CAAxB;AACA,IAAM,UAAU,GAAG,MAAM,CAAC,WAAD,CAAzB;AAEA;;;;;;AAKA,WAAa,KAAb;AAAA;;AAAA;;AAIE,iBAAY,KAAZ,EAA+B,QAA/B,EAAiD,IAAjD,EAA2D;AAAA;;AAAA;;AACzD,8BAAM,KAAN,EAAa,IAAb;AAJK,UAAA,EAAA,IAAc,EAAd;AACA,UAAA,EAAA,IAAgC,EAAhC;AAKL,UAAK,SAAL,IAAkB,QAAlB;AAEA,QAAM,gBAAgB,GAAG,IAAI,GAAJ,EAAzB;AAEA,IAAA,IAAI,CAAC,KAAL,CAAW,QAAX,CAAoB,UAAC,QAAD,EAAa;AAC/B,UAAM,SAAS,GAAG,QAAlB;AACA,UAAI,aAAa,GAAyB,EAA1C;;AAEA,UAAI,SAAS,CAAC,MAAV,IAAoB,SAAS,CAAC,QAAV,IAAsB,IAA9C,EAAoD;AAClD,QAAA,aAAa,GAAG,KAAK,CAAC,OAAN,CAAc,SAAS,CAAC,QAAxB,IACZ,SAAS,CAAC,QADE,GAEZ,CAAC,SAAS,CAAC,QAAX,CAFJ;AAGD;;AAR8B,iDAUR,aAVQ;AAAA;;AAAA;AAU/B,4DAAsC;AAAA,cAA3B,QAA2B;;AACpC,cAAI,gBAAgB,CAAC,GAAjB,CAAqB,QAArB,CAAJ,EAAoC;AAClC;AACD;;AAED,gBAAK,UAAL,EAAiB,IAAjB,CAAsB,IAAI,QAAJ,CAAa,KAAb,EAAoB,QAApB,CAAtB;;AACA,UAAA,gBAAgB,CAAC,GAAjB,CAAqB,QAArB;AACD;AAjB8B;AAAA;AAAA;AAAA;AAAA;AAkBhC,KAlBD;AAPyD;AA0B1D;AAED;;;;;;;;;;AAhCF;AAAA;AAAA,6BA4CQ;AACJ,UAAM,UAAU,oEAAhB;;AAEA,MAAA,UAAU,CAAC,QAAX,GAAsB,KAAK,SAAL,CAAtB;AACA,MAAA,UAAU,CAAC,SAAX,GACI,KAAK,UAAL,EAAiB,GAAjB,CAAqB,UAAC,QAAD;AAAA,eAAc,QAAQ,CAAC,MAAT,EAAd;AAAA,OAArB,CADJ;AAGA,aAAO,UAAP;AACD;AApDH;AAAA;AAAA,wBAwCe;AACX,aAAO,KAAK,UAAL,CAAP;AACD;AA1CH;;AAAA;AAAA,EAA2B,eAA3B;KACU,S,EAAS,EAAA,GACT,U","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Material as ThreeMaterial} from 'three';\nimport {Mesh as ThreeMesh} from 'three';\nimport {GLTF} from 'three/examples/jsm/loaders/GLTFLoader.js';\n\nimport {SerializedModel} from '../../protocol.js';\nimport {Model as ModelInterface} from '../api.js';\n\nimport {Material} from './material.js';\nimport {ModelGraft} from './model-graft.js';\nimport {ThreeDOMElement} from './three-dom-element.js';\n\n\nconst $modelUri = Symbol('modelUri');\nconst $materials = Symbol('materials');\n\n/**\n * A Model facades the top-level GLTF object returned by Three.js' GLTFLoader.\n * Currently, the model only bothers itself with the materials in the Three.js\n * scene graph.\n */\nexport class Model extends ThreeDOMElement implements ModelInterface {\n  private[$modelUri] = '';\n  private[$materials]: Array<Material> = [];\n\n  constructor(graft: ModelGraft, modelUri: string, gltf: GLTF) {\n    super(graft, gltf);\n\n    this[$modelUri] = modelUri;\n\n    const visitedMaterials = new Set();\n\n    gltf.scene.traverse((object3D) => {\n      const maybeMesh = object3D as ThreeMesh;\n      let meshMaterials: Array<ThreeMaterial> = [];\n\n      if (maybeMesh.isMesh && maybeMesh.material != null) {\n        meshMaterials = Array.isArray(maybeMesh.material) ?\n            maybeMesh.material :\n            [maybeMesh.material];\n      }\n\n      for (const material of meshMaterials) {\n        if (visitedMaterials.has(material)) {\n          continue;\n        }\n\n        this[$materials].push(new Material(graft, material));\n        visitedMaterials.add(material);\n      }\n    });\n  }\n\n  /**\n   * A flat list of all unique materials found in this scene graph. Materials\n   * are listed in the order they appear during pre-order, depth-first traveral\n   * of the scene graph.\n   *\n   * TODO(#1003): How do we handle non-active scenes?\n   * TODO(#1002): Desctibe and enforce traversal order\n   */\n  get materials() {\n    return this[$materials];\n  }\n\n  toJSON(): SerializedModel {\n    const serialized: Partial<SerializedModel> = super.toJSON();\n\n    serialized.modelUri = this[$modelUri];\n    serialized.materials =\n        this[$materials].map((material) => material.toJSON());\n\n    return serialized as SerializedModel;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}