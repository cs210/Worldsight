{"ast":null,"code":"import _classCallCheck from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Mesh, OrthographicCamera, PlaneBufferGeometry, Scene, ShaderMaterial, Texture, WebGLRenderTarget } from 'three';\n/**\n * This Debugger exposes internal details of the <model-viewer> rendering\n * substructure so that external tools can more easily inspect and operate on\n * them.\n *\n * It also activates shader debugging on the associated GL context. Shader\n * debugging trades performance for useful error information, so it is not\n * recommended to activate this unless needed.\n */\n\nexport var Debugger = /*#__PURE__*/function () {\n  function Debugger(renderer) {\n    _classCallCheck(this, Debugger);\n\n    // Force WebGL shader debugging on:\n    renderer.threeRenderer.debug = {\n      checkShaderErrors: true\n    }; // Announce debug details at microtask timing to give the `Renderer`\n    // constructor time to complete its initialization, just to be on the safe\n    // side:\n\n    Promise.resolve().then(function () {\n      self.dispatchEvent(new CustomEvent('model-viewer-renderer-debug', {\n        detail: {\n          renderer: renderer,\n          THREE: {\n            ShaderMaterial: ShaderMaterial,\n            Texture: Texture,\n            Mesh: Mesh,\n            Scene: Scene,\n            PlaneBufferGeometry: PlaneBufferGeometry,\n            OrthographicCamera: OrthographicCamera,\n            WebGLRenderTarget: WebGLRenderTarget\n          }\n        }\n      }));\n    });\n  }\n\n  _createClass(Debugger, [{\n    key: \"addScene\",\n    value: function addScene(scene) {\n      self.dispatchEvent(new CustomEvent('model-viewer-scene-added-debug', {\n        detail: {\n          scene: scene\n        }\n      }));\n    }\n  }, {\n    key: \"removeScene\",\n    value: function removeScene(scene) {\n      self.dispatchEvent(new CustomEvent('model-viewer-scene-removed-debug', {\n        detail: {\n          scene: scene\n        }\n      }));\n    }\n  }]);\n\n  return Debugger;\n}();","map":{"version":3,"sources":["../../src/three-components/Debugger.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;AAeA,SAAQ,IAAR,EAAc,kBAAd,EAAkC,mBAAlC,EAAuD,KAAvD,EAA8D,cAA9D,EAA8E,OAA9E,EAAuF,iBAAvF,QAA+G,OAA/G;AAwBA;;;;;;;;;;AASA,WAAa,QAAb;AACE,oBAAY,QAAZ,EAA8B;AAAA;;AAC5B;AACA,IAAA,QAAQ,CAAC,aAAT,CAAuB,KAAvB,GAA+B;AAAC,MAAA,iBAAiB,EAAE;AAApB,KAA/B,CAF4B,CAG5B;AACA;AACA;;AACA,IAAA,OAAO,CAAC,OAAR,GAAkB,IAAlB,CAAuB,YAAK;AAC1B,MAAA,IAAI,CAAC,aAAL,CAAmB,IAAI,WAAJ,CACf,6BADe,EACgB;AAC7B,QAAA,MAAM,EAAE;AACN,UAAA,QAAQ,EAAR,QADM;AAEN,UAAA,KAAK,EAAE;AACL,YAAA,cAAc,EAAd,cADK;AAEL,YAAA,OAAO,EAAP,OAFK;AAGL,YAAA,IAAI,EAAJ,IAHK;AAIL,YAAA,KAAK,EAAL,KAJK;AAKL,YAAA,mBAAmB,EAAnB,mBALK;AAML,YAAA,kBAAkB,EAAlB,kBANK;AAOL,YAAA,iBAAiB,EAAjB;AAPK;AAFD;AADqB,OADhB,CAAnB;AAeD,KAhBD;AAiBD;;AAxBH;AAAA;AAAA,6BA0BW,KA1BX,EA0B4B;AACxB,MAAA,IAAI,CAAC,aAAL,CAAmB,IAAI,WAAJ,CACf,gCADe,EACmB;AAAC,QAAA,MAAM,EAAE;AAAC,UAAA,KAAK,EAAL;AAAD;AAAT,OADnB,CAAnB;AAED;AA7BH;AAAA;AAAA,gCA+Bc,KA/Bd,EA+B+B;AAC3B,MAAA,IAAI,CAAC,aAAL,CAAmB,IAAI,WAAJ,CACf,kCADe,EACqB;AAAC,QAAA,MAAM,EAAE;AAAC,UAAA,KAAK,EAAL;AAAD;AAAT,OADrB,CAAnB;AAED;AAlCH;;AAAA;AAAA","sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Mesh, OrthographicCamera, PlaneBufferGeometry, Scene, ShaderMaterial, Texture, WebGLRenderTarget} from 'three';\n\nimport {Constructor} from '../utilities.js';\n\nimport {ModelScene} from './ModelScene.js';\nimport {Renderer} from './Renderer.js';\n\nexport interface ModelViewerRendererDebugDetails {\n  renderer: Renderer;\n  THREE: {\n    ShaderMaterial: Constructor<ShaderMaterial>;\n    PlaneBufferGeometry: Constructor<PlaneBufferGeometry>;\n    OrthographicCamera: Constructor<OrthographicCamera>;\n    WebGLRenderTarget: Constructor<WebGLRenderTarget>;\n    Texture: Constructor<Texture>;\n    Scene: Constructor<Scene>;\n    Mesh: Constructor<Mesh>;\n  };\n}\n\nexport interface ModelViewerSceneDetails {\n  scene: ModelScene\n}\n\n/**\n * This Debugger exposes internal details of the <model-viewer> rendering\n * substructure so that external tools can more easily inspect and operate on\n * them.\n *\n * It also activates shader debugging on the associated GL context. Shader\n * debugging trades performance for useful error information, so it is not\n * recommended to activate this unless needed.\n */\nexport class Debugger {\n  constructor(renderer: Renderer) {\n    // Force WebGL shader debugging on:\n    renderer.threeRenderer.debug = {checkShaderErrors: true};\n    // Announce debug details at microtask timing to give the `Renderer`\n    // constructor time to complete its initialization, just to be on the safe\n    // side:\n    Promise.resolve().then(() => {\n      self.dispatchEvent(new CustomEvent<ModelViewerRendererDebugDetails>(\n          'model-viewer-renderer-debug', {\n            detail: {\n              renderer,\n              THREE: {\n                ShaderMaterial,\n                Texture,\n                Mesh,\n                Scene,\n                PlaneBufferGeometry,\n                OrthographicCamera,\n                WebGLRenderTarget\n              }\n            }\n          }));\n    });\n  }\n\n  addScene(scene: ModelScene) {\n    self.dispatchEvent(new CustomEvent<ModelViewerSceneDetails>(\n        'model-viewer-scene-added-debug', {detail: {scene}}));\n  }\n\n  removeScene(scene: ModelScene) {\n    self.dispatchEvent(new CustomEvent<ModelViewerSceneDetails>(\n        'model-viewer-scene-removed-debug', {detail: {scene}}));\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}