{"ast":null,"code":"import _regeneratorRuntime from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _getPrototypeOf from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { property } from 'lit-element';\nimport { IS_ANDROID, IS_AR_QUICKLOOK_CANDIDATE, IS_IOS_CHROME, IS_IOS_SAFARI, IS_WEBXR_AR_CANDIDATE } from '../constants.js';\nimport { $container, $renderer, $scene } from '../model-viewer-base.js';\nimport { enumerationDeserializer } from '../styles/deserializers.js';\nimport { deserializeUrl } from '../utilities.js';\n/**\n * Takes a URL to a USDZ file and sets the appropriate fields so that Safari\n * iOS can intent to their AR Quick Look.\n */\n\nexport var openIOSARQuickLook = function () {\n  var anchor = document.createElement('a');\n  anchor.setAttribute('rel', 'ar');\n  anchor.appendChild(document.createElement('img'));\n  return function (usdzSrc) {\n    anchor.setAttribute('href', usdzSrc);\n    anchor.click();\n  };\n}();\n/**\n * Takes a URL and a title string, and attempts to launch Scene Viewer on the\n * current device.\n */\n\nexport var openSceneViewer = function () {\n  var anchor = document.createElement('a');\n  var noArViewerSigil = '#model-viewer-no-ar-fallback';\n  var fallbackInvoked = false;\n  return function (gltfSrc, title, arScale) {\n    // If the fallback has ever been invoked this session, bounce early:\n    if (fallbackInvoked) {\n      return;\n    }\n\n    var location = self.location.toString();\n    var locationUrl = new URL(location);\n    var modelUrl = new URL(gltfSrc);\n    var scheme = modelUrl.protocol.replace(':', '');\n    locationUrl.hash = noArViewerSigil;\n    var intentParams = \"?file=\".concat(encodeURIComponent(modelUrl.toString()), \"&mode=ar_only&link=\").concat(location, \"&title=\").concat(encodeURIComponent(title));\n\n    if (arScale === 'fixed') {\n      intentParams += \"&resizable=false\";\n    }\n\n    var intent = \"intent://arvr.google.com/scene-viewer/1.0\".concat(intentParams, \"#Intent;scheme=\").concat(scheme, \";package=com.google.ar.core;action=android.intent.action.VIEW;S.browser_fallback_url=\").concat(encodeURIComponent(locationUrl.toString()), \";end;\");\n\n    var undoHashChange = function undoHashChange() {\n      if (self.location.hash === noArViewerSigil && !fallbackInvoked) {\n        fallbackInvoked = true; // The new history will be the current URL with a new hash.\n        // Go back one step so that we reset to the expected URL.\n        // NOTE(cdata): this should not invoke any browser-level navigation\n        // because hash-only changes modify the URL in-place without\n        // navigating:\n\n        self.history.back();\n      }\n    };\n\n    self.addEventListener('hashchange', undoHashChange, {\n      once: true\n    });\n    anchor.setAttribute('href', intent);\n    anchor.click();\n  };\n}();\nvar deserializeQuickLookBrowsers = enumerationDeserializer(['safari', 'chrome']);\nvar deserializeARModes = enumerationDeserializer(['quick-look', 'scene-viewer', 'webxr', 'fallback', 'none']);\nvar DEFAULT_AR_MODES = 'scene-viewer quick-look fallback';\nvar ARMode = {\n  QUICK_LOOK: 'quick-look',\n  SCENE_VIEWER: 'scene-viewer',\n  WEBXR: 'webxr',\n  NONE: 'none'\n};\nvar $exitFullscreenButtonContainer = Symbol('exitFullscreenButtonContainer');\nvar $arButtonContainer = Symbol('arButtonContainer');\nvar $defaultExitFullscreenButton = Symbol('defaultExitFullscreenButton');\nvar $enterARWithWebXR = Symbol('enterARWithWebXR');\nvar $canActivateAR = Symbol('canActivateAR');\nvar $arMode = Symbol('arMode');\nvar $arModes = Symbol('arModes');\nvar $canLaunchQuickLook = Symbol('canLaunchQuickLook');\nvar $quickLookBrowsers = Symbol('quickLookBrowsers');\nvar $arButtonContainerFallbackClickHandler = Symbol('arButtonContainerFallbackClickHandler');\nvar $onARButtonContainerFallbackClick = Symbol('onARButtonContainerFallbackClick');\nvar $arButtonContainerClickHandler = Symbol('arButtonContainerClickHandler');\nvar $onARButtonContainerClick = Symbol('onARButtonContainerClick');\nvar $exitFullscreenButtonContainerClickHandler = Symbol('exitFullscreenButtonContainerClickHandler');\nvar $onExitFullscreenButtonClick = Symbol('onExitFullscreenButtonClick');\nvar $fullscreenchangeHandler = Symbol('fullscreenHandler');\nvar $onFullscreenchange = Symbol('onFullscreen');\nexport var ARMixin = function ARMixin(ModelViewerElement) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n\n  var ARModelViewerElement = /*#__PURE__*/function (_ModelViewerElement) {\n    _inherits(ARModelViewerElement, _ModelViewerElement);\n\n    var _super = _createSuper(ARModelViewerElement);\n\n    function ARModelViewerElement() {\n      var _this;\n\n      _classCallCheck(this, ARModelViewerElement);\n\n      _this = _super.apply(this, arguments);\n      _this.ar = false;\n      _this.arScale = 'auto';\n      _this.arModes = DEFAULT_AR_MODES;\n      _this.iosSrc = null;\n      _this.quickLookBrowsers = 'safari';\n      _this[_a] = false; // TODO: Add this to the shadow root as part of this mixin's\n      // implementation:\n\n      _this[_b] = _this.shadowRoot.querySelector('.ar-button');\n      _this[_c] = _this.shadowRoot.querySelector('.slot.exit-fullscreen-button');\n      _this[_d] = _this.shadowRoot.querySelector('#default-exit-fullscreen-button'); // NOTE(cdata): We use a second, separate \"fallback\" click handler in\n      // order to work around a regression in how Chrome on Android behaves\n      // when requesting fullscreen at the same time as triggering an intent.\n      // As of m76, intents could no longer be triggered successfully if they\n      // were dispatched in the same handler as the fullscreen request. The\n      // workaround is to split both effects into their own event handlers.\n      // @see https://github.com/GoogleWebComponents/model-viewer/issues/693\n\n      _this[_e] = function (event) {\n        return _this[$onARButtonContainerFallbackClick](event);\n      };\n\n      _this[_f] = function (event) {\n        return _this[$onARButtonContainerClick](event);\n      };\n\n      _this[_g] = function () {\n        return _this[$onExitFullscreenButtonClick]();\n      };\n\n      _this[_h] = function () {\n        return _this[$onFullscreenchange]();\n      };\n\n      _this[_j] = new Set();\n      _this[_k] = ARMode.NONE;\n      _this[_l] = new Set();\n      return _this;\n    }\n\n    _createClass(ARModelViewerElement, [{\n      key: \"activateAR\",\n\n      /**\n       * Activates AR. Note that for any mode that is not WebXR-based, this\n       * method most likely has to be called synchronous from a user\n       * interaction handler. Otherwise, attempts to activate modes that\n       * require user interaction will most likely be ignored.\n       */\n      value: function () {\n        var _activateAR = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.t0 = this[$arMode];\n                  _context.next = _context.t0 === ARMode.QUICK_LOOK ? 3 : _context.t0 === ARMode.WEBXR ? 5 : _context.t0 === ARMode.SCENE_VIEWER ? 8 : 10;\n                  break;\n\n                case 3:\n                  openIOSARQuickLook(this.iosSrc);\n                  return _context.abrupt(\"break\", 12);\n\n                case 5:\n                  _context.next = 7;\n                  return this[$enterARWithWebXR]();\n\n                case 7:\n                  return _context.abrupt(\"break\", 12);\n\n                case 8:\n                  openSceneViewer(this.src, this.alt || '', this.arScale);\n                  return _context.abrupt(\"break\", 12);\n\n                case 10:\n                  console.warn('No AR Mode can be activated. This is probably due to missing \\\nconfiguration or device capabilities');\n                  return _context.abrupt(\"break\", 12);\n\n                case 12:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n\n        function activateAR() {\n          return _activateAR.apply(this, arguments);\n        }\n\n        return activateAR;\n      }()\n    }, {\n      key: \"connectedCallback\",\n      value: function connectedCallback() {\n        _get(_getPrototypeOf(ARModelViewerElement.prototype), \"connectedCallback\", this).call(this);\n\n        document.addEventListener('fullscreenchange', this[$fullscreenchangeHandler]);\n      }\n    }, {\n      key: \"disconnectedCallback\",\n      value: function disconnectedCallback() {\n        _get(_getPrototypeOf(ARModelViewerElement.prototype), \"disconnectedCallback\", this).call(this);\n\n        document.removeEventListener('fullscreenchange', this[$fullscreenchangeHandler]);\n      }\n    }, {\n      key: (_a = $canActivateAR, _b = $arButtonContainer, _c = $exitFullscreenButtonContainer, _d = $defaultExitFullscreenButton, _e = $arButtonContainerFallbackClickHandler, _f = $arButtonContainerClickHandler, _g = $exitFullscreenButtonContainerClickHandler, _h = $fullscreenchangeHandler, _j = $arModes, _k = $arMode, _l = $quickLookBrowsers, $onExitFullscreenButtonClick),\n      value: function value() {\n        if (document.fullscreenElement === this) {\n          document.exitFullscreen();\n        }\n      }\n    }, {\n      key: $onFullscreenchange,\n      value: function value() {\n        if (this[$arMode] !== ARMode.AR_VIEWER) {\n          return;\n        }\n\n        var scene = this[$scene];\n        var isFullscreen = document.fullscreenElement === this;\n\n        if (isFullscreen) {\n          this[$container].classList.add('fullscreen');\n        } else {\n          this[$container].classList.remove('fullscreen');\n        }\n\n        if (!isFullscreen && this[$renderer].presentedScene === scene) {\n          try {\n            this[$renderer].stopPresenting();\n          } catch (error) {\n            console.warn('Unexpected error while stopping AR presentation');\n            console.error(error);\n          }\n        }\n      }\n    }, {\n      key: $enterARWithWebXR,\n      value: function () {\n        var _value = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  console.log('Attempting to present in AR...');\n                  _context2.prev = 1;\n                  _context2.next = 4;\n                  return this[$renderer].present(this[$scene]);\n\n                case 4:\n                  _context2.next = 10;\n                  break;\n\n                case 6:\n                  _context2.prev = 6;\n                  _context2.t0 = _context2[\"catch\"](1);\n                  console.warn('Error while trying to present to AR');\n                  console.error(_context2.t0);\n\n                case 10:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, this, [[1, 6]]);\n        }));\n\n        function value() {\n          return _value.apply(this, arguments);\n        }\n\n        return value;\n      }()\n    }, {\n      key: \"update\",\n      value: function () {\n        var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(changedProperties) {\n          var it, item, _item, value;\n\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _get(_getPrototypeOf(ARModelViewerElement.prototype), \"update\", this).call(this, changedProperties);\n\n                  if (changedProperties.has('quickLookBrowsers')) {\n                    this[$quickLookBrowsers] = deserializeQuickLookBrowsers(this.quickLookBrowsers);\n                  }\n\n                  if (!(!changedProperties.has('ar') && !changedProperties.has('arModes') && !changedProperties.has('iosSrc'))) {\n                    _context3.next = 4;\n                    break;\n                  }\n\n                  return _context3.abrupt(\"return\");\n\n                case 4:\n                  if (changedProperties.has('arModes')) {\n                    this[$arModes] = deserializeARModes(this.arModes);\n                  }\n\n                  if (changedProperties.has('arScale')) {\n                    this[$scene].canScale = this.arScale !== 'fixed';\n                  }\n\n                  this[$arMode] = ARMode.NONE;\n\n                  if (!this.ar) {\n                    _context3.next = 33;\n                    break;\n                  }\n\n                  it = this[$arModes].values();\n                  item = it.next();\n\n                case 10:\n                  if (item.done) {\n                    _context3.next = 33;\n                    break;\n                  }\n\n                  _item = item, value = _item.value;\n                  _context3.t0 = value === 'webxr' && IS_WEBXR_AR_CANDIDATE;\n\n                  if (!_context3.t0) {\n                    _context3.next = 17;\n                    break;\n                  }\n\n                  _context3.next = 16;\n                  return this[$renderer].supportsPresentation();\n\n                case 16:\n                  _context3.t0 = _context3.sent;\n\n                case 17:\n                  if (!_context3.t0) {\n                    _context3.next = 22;\n                    break;\n                  }\n\n                  this[$arMode] = ARMode.WEBXR;\n                  return _context3.abrupt(\"break\", 33);\n\n                case 22:\n                  if (!(value === 'scene-viewer' && IS_ANDROID)) {\n                    _context3.next = 27;\n                    break;\n                  }\n\n                  this[$arMode] = ARMode.SCENE_VIEWER;\n                  return _context3.abrupt(\"break\", 33);\n\n                case 27:\n                  if (!(value === 'quick-look' && !!this.iosSrc && this[$canLaunchQuickLook] && IS_AR_QUICKLOOK_CANDIDATE)) {\n                    _context3.next = 30;\n                    break;\n                  }\n\n                  this[$arMode] = ARMode.QUICK_LOOK;\n                  return _context3.abrupt(\"break\", 33);\n\n                case 30:\n                  item = it.next();\n                  _context3.next = 10;\n                  break;\n\n                case 33:\n                  if (this.canActivateAR) {\n                    this[$arButtonContainer].classList.add('enabled'); // NOTE(cdata): The order of the two click handlers on the \"ar\n                    // button container\" is important, vital to the workaround described\n                    // earlier in this file. Reversing their order will cause our Scene\n                    // Viewer integration to break.\n                    // @see https://github.com/GoogleWebComponents/model-viewer/issues/693\n\n                    this[$arButtonContainer].addEventListener('click', this[$arButtonContainerClickHandler]);\n                    this[$arButtonContainer].addEventListener('click', this[$arButtonContainerFallbackClickHandler]);\n                    this[$exitFullscreenButtonContainer].addEventListener('click', this[$exitFullscreenButtonContainerClickHandler]);\n                  } else {\n                    this[$arButtonContainer].removeEventListener('click', this[$arButtonContainerClickHandler]);\n                    this[$arButtonContainer].removeEventListener('click', this[$arButtonContainerFallbackClickHandler]);\n                    this[$exitFullscreenButtonContainer].removeEventListener('click', this[$exitFullscreenButtonContainerClickHandler]);\n                    this[$arButtonContainer].classList.remove('enabled');\n                  }\n\n                case 34:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3, this);\n        }));\n\n        function update(_x) {\n          return _update.apply(this, arguments);\n        }\n\n        return update;\n      }()\n    }, {\n      key: $onARButtonContainerFallbackClick,\n      value: function value(_event) {\n        if (this[$arMode] === ARMode.SCENE_VIEWER && this[$arModes].has('fallback')) {\n          this.requestFullscreen();\n        }\n      }\n    }, {\n      key: $onARButtonContainerClick,\n      value: function value(event) {\n        event.preventDefault();\n        this.activateAR();\n      }\n    }, {\n      key: \"canActivateAR\",\n      get: function get() {\n        return this[$arMode] !== ARMode.NONE;\n      }\n    }, {\n      key: $canLaunchQuickLook,\n      get: function get() {\n        if (IS_IOS_CHROME) {\n          return this[$quickLookBrowsers].has('chrome');\n        } else if (IS_IOS_SAFARI) {\n          return this[$quickLookBrowsers].has('safari');\n        }\n\n        return false;\n      }\n    }]);\n\n    return ARModelViewerElement;\n  }(ModelViewerElement);\n\n  __decorate([property({\n    type: Boolean,\n    attribute: 'ar'\n  })], ARModelViewerElement.prototype, \"ar\", void 0);\n\n  __decorate([property({\n    type: String,\n    attribute: 'ar-scale'\n  })], ARModelViewerElement.prototype, \"arScale\", void 0);\n\n  __decorate([property({\n    type: String,\n    attribute: 'ar-modes'\n  })], ARModelViewerElement.prototype, \"arModes\", void 0);\n\n  __decorate([property({\n    converter: {\n      fromAttribute: deserializeUrl\n    },\n    attribute: 'ios-src'\n  })], ARModelViewerElement.prototype, \"iosSrc\", void 0);\n\n  __decorate([property({\n    type: String,\n    attribute: 'quick-look-browsers'\n  })], ARModelViewerElement.prototype, \"quickLookBrowsers\", void 0);\n\n  return ARModelViewerElement;\n};","map":{"version":3,"sources":["../../src/features/ar.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {property} from 'lit-element';\n\nimport {IS_ANDROID, IS_AR_QUICKLOOK_CANDIDATE, IS_IOS_CHROME, IS_IOS_SAFARI, IS_WEBXR_AR_CANDIDATE} from '../constants.js';\nimport ModelViewerElementBase, {$container, $renderer, $scene} from '../model-viewer-base.js';\nimport {enumerationDeserializer} from '../styles/deserializers.js';\nimport {Constructor, deserializeUrl} from '../utilities.js';\n\n/**\n * Takes a URL to a USDZ file and sets the appropriate fields so that Safari\n * iOS can intent to their AR Quick Look.\n */\nexport const openIOSARQuickLook = (() => {\n  const anchor = document.createElement('a');\n  anchor.setAttribute('rel', 'ar');\n  anchor.appendChild(document.createElement('img'));\n\n  return (usdzSrc: string) => {\n    anchor.setAttribute('href', usdzSrc);\n    anchor.click();\n  };\n})();\n\n/**\n * Takes a URL and a title string, and attempts to launch Scene Viewer on the\n * current device.\n */\nexport const openSceneViewer = (() => {\n  const anchor = document.createElement('a');\n  const noArViewerSigil = '#model-viewer-no-ar-fallback';\n  let fallbackInvoked = false;\n\n  return (gltfSrc: string, title: string, arScale: string) => {\n    // If the fallback has ever been invoked this session, bounce early:\n    if (fallbackInvoked) {\n      return;\n    }\n\n    const location = self.location.toString();\n    const locationUrl = new URL(location);\n    const modelUrl = new URL(gltfSrc);\n    const scheme = modelUrl.protocol.replace(':', '');\n\n    locationUrl.hash = noArViewerSigil;\n\n    let intentParams =\n        `?file=${encodeURIComponent(modelUrl.toString())}&mode=ar_only&link=${\n            location}&title=${encodeURIComponent(title)}`;\n\n    if (arScale === 'fixed') {\n      intentParams += `&resizable=false`;\n    }\n\n    const intent = `intent://arvr.google.com/scene-viewer/1.0${\n        intentParams}#Intent;scheme=${\n        scheme};package=com.google.ar.core;action=android.intent.action.VIEW;S.browser_fallback_url=${\n        encodeURIComponent(locationUrl.toString())};end;`;\n\n    const undoHashChange = () => {\n      if (self.location.hash === noArViewerSigil && !fallbackInvoked) {\n        fallbackInvoked = true;\n        // The new history will be the current URL with a new hash.\n        // Go back one step so that we reset to the expected URL.\n        // NOTE(cdata): this should not invoke any browser-level navigation\n        // because hash-only changes modify the URL in-place without\n        // navigating:\n        self.history.back();\n      }\n    };\n\n    self.addEventListener('hashchange', undoHashChange, {once: true});\n\n    anchor.setAttribute('href', intent);\n    anchor.click();\n  };\n})();\n\nexport type QuickLookBrowser = 'safari'|'chrome';\n\nconst deserializeQuickLookBrowsers =\n    enumerationDeserializer<QuickLookBrowser>(['safari', 'chrome']);\n\nexport type ARMode = 'quick-look'|'scene-viewer'|'webxr'|'fallback'|'none';\n\nconst deserializeARModes = enumerationDeserializer<ARMode>(\n    ['quick-look', 'scene-viewer', 'webxr', 'fallback', 'none']);\n\nconst DEFAULT_AR_MODES = 'scene-viewer quick-look fallback';\n\nconst ARMode: {[index: string]: ARMode} = {\n  QUICK_LOOK: 'quick-look',\n  SCENE_VIEWER: 'scene-viewer',\n  WEBXR: 'webxr',\n  NONE: 'none'\n};\n\nconst $exitFullscreenButtonContainer = Symbol('exitFullscreenButtonContainer');\nconst $arButtonContainer = Symbol('arButtonContainer');\nconst $defaultExitFullscreenButton = Symbol('defaultExitFullscreenButton');\nconst $enterARWithWebXR = Symbol('enterARWithWebXR');\nconst $canActivateAR = Symbol('canActivateAR');\nconst $arMode = Symbol('arMode');\nconst $arModes = Symbol('arModes');\nconst $canLaunchQuickLook = Symbol('canLaunchQuickLook');\nconst $quickLookBrowsers = Symbol('quickLookBrowsers');\n\nconst $arButtonContainerFallbackClickHandler =\n    Symbol('arButtonContainerFallbackClickHandler');\nconst $onARButtonContainerFallbackClick =\n    Symbol('onARButtonContainerFallbackClick');\nconst $arButtonContainerClickHandler = Symbol('arButtonContainerClickHandler');\nconst $onARButtonContainerClick = Symbol('onARButtonContainerClick');\n\nconst $exitFullscreenButtonContainerClickHandler =\n    Symbol('exitFullscreenButtonContainerClickHandler');\nconst $onExitFullscreenButtonClick = Symbol('onExitFullscreenButtonClick');\n\nconst $fullscreenchangeHandler = Symbol('fullscreenHandler');\nconst $onFullscreenchange = Symbol('onFullscreen');\n\nexport declare interface ARInterface {\n  ar: boolean;\n  arModes: string;\n  arScale: string;\n  iosSrc: string|null;\n  quickLookBrowsers: string;\n  readonly canActivateAR: boolean;\n  activateAR(): Promise<void>;\n}\n\nexport const ARMixin = <T extends Constructor<ModelViewerElementBase>>(\n    ModelViewerElement: T): Constructor<ARInterface>&T => {\n  class ARModelViewerElement extends ModelViewerElement {\n    @property({type: Boolean, attribute: 'ar'}) ar: boolean = false;\n\n    @property({type: String, attribute: 'ar-scale'}) arScale: string = 'auto';\n\n    @property({type: String, attribute: 'ar-modes'})\n    arModes: string = DEFAULT_AR_MODES;\n\n    @property(\n        {converter: {fromAttribute: deserializeUrl}, attribute: 'ios-src'})\n    iosSrc: string|null = null;\n\n    @property({type: String, attribute: 'quick-look-browsers'})\n    quickLookBrowsers: string = 'safari';\n\n    get canActivateAR(): boolean {\n      return this[$arMode] !== ARMode.NONE;\n    }\n\n    protected[$canActivateAR]: boolean = false;\n\n    // TODO: Add this to the shadow root as part of this mixin's\n    // implementation:\n    protected[$arButtonContainer]: HTMLElement =\n        this.shadowRoot!.querySelector('.ar-button') as HTMLElement;\n\n    protected[$exitFullscreenButtonContainer]: HTMLElement =\n        this.shadowRoot!.querySelector('.slot.exit-fullscreen-button') as\n        HTMLElement;\n    protected[$defaultExitFullscreenButton]: HTMLElement =\n        this.shadowRoot!.querySelector('#default-exit-fullscreen-button') as\n        HTMLElement;\n\n    // NOTE(cdata): We use a second, separate \"fallback\" click handler in\n    // order to work around a regression in how Chrome on Android behaves\n    // when requesting fullscreen at the same time as triggering an intent.\n    // As of m76, intents could no longer be triggered successfully if they\n    // were dispatched in the same handler as the fullscreen request. The\n    // workaround is to split both effects into their own event handlers.\n    // @see https://github.com/GoogleWebComponents/model-viewer/issues/693\n    protected[$arButtonContainerFallbackClickHandler] = (event: Event) =>\n        this[$onARButtonContainerFallbackClick](event);\n\n    protected[$arButtonContainerClickHandler]: (event: Event) => void =\n        (event) => this[$onARButtonContainerClick](event);\n\n    protected[$exitFullscreenButtonContainerClickHandler]:\n        () => void = () => this[$onExitFullscreenButtonClick]();\n\n    protected[$fullscreenchangeHandler]:\n        () => void = () => this[$onFullscreenchange]();\n\n    protected[$arModes]: Set<ARMode> = new Set();\n    protected[$arMode]: ARMode = ARMode.NONE;\n\n    protected[$quickLookBrowsers]: Set<QuickLookBrowser> = new Set();\n\n    /**\n     * Activates AR. Note that for any mode that is not WebXR-based, this\n     * method most likely has to be called synchronous from a user\n     * interaction handler. Otherwise, attempts to activate modes that\n     * require user interaction will most likely be ignored.\n     */\n    async activateAR() {\n      switch (this[$arMode]) {\n        case ARMode.QUICK_LOOK:\n          openIOSARQuickLook(this.iosSrc!);\n          break;\n        case ARMode.WEBXR:\n          await this[$enterARWithWebXR]();\n          break;\n        case ARMode.SCENE_VIEWER:\n          openSceneViewer(this.src!, this.alt || '', this.arScale);\n          break;\n        default:\n          console.warn(\n              'No AR Mode can be activated. This is probably due to missing \\\nconfiguration or device capabilities');\n          break;\n      }\n    }\n\n    connectedCallback() {\n      super.connectedCallback();\n      document.addEventListener(\n          'fullscreenchange', this[$fullscreenchangeHandler]);\n    }\n\n    disconnectedCallback() {\n      super.disconnectedCallback();\n      document.removeEventListener(\n          'fullscreenchange', this[$fullscreenchangeHandler]);\n    }\n\n    [$onExitFullscreenButtonClick]() {\n      if (document.fullscreenElement === this) {\n        document.exitFullscreen();\n      }\n    }\n\n    [$onFullscreenchange]() {\n      if (this[$arMode] !== ARMode.AR_VIEWER) {\n        return;\n      }\n      const scene = this[$scene];\n      const isFullscreen = document.fullscreenElement === this;\n\n      if (isFullscreen) {\n        this[$container].classList.add('fullscreen');\n      } else {\n        this[$container].classList.remove('fullscreen');\n      }\n\n      if (!isFullscreen && this[$renderer].presentedScene === scene) {\n        try {\n          this[$renderer].stopPresenting();\n        } catch (error) {\n          console.warn('Unexpected error while stopping AR presentation');\n          console.error(error);\n        }\n      }\n    }\n\n    protected async[$enterARWithWebXR]() {\n      console.log('Attempting to present in AR...');\n\n      try {\n        await this[$renderer].present(this[$scene]);\n      } catch (error) {\n        console.warn('Error while trying to present to AR');\n        console.error(error);\n      }\n    }\n\n    async update(changedProperties: Map<string, any>) {\n      super.update(changedProperties);\n\n      if (changedProperties.has('quickLookBrowsers')) {\n        this[$quickLookBrowsers] =\n            deserializeQuickLookBrowsers(this.quickLookBrowsers);\n      }\n\n      if (!changedProperties.has('ar') && !changedProperties.has('arModes') &&\n          !changedProperties.has('iosSrc')) {\n        return;\n      }\n\n      if (changedProperties.has('arModes')) {\n        this[$arModes] = deserializeARModes(this.arModes);\n      }\n\n      if (changedProperties.has('arScale')) {\n        this[$scene].canScale = this.arScale !== 'fixed';\n      }\n\n      this[$arMode] = ARMode.NONE;\n      if (this.ar) {\n        const it = this[$arModes].values();\n        let item = it.next();\n        while (!item.done) {\n          const {value} = item;\n          if (value === 'webxr' && IS_WEBXR_AR_CANDIDATE &&\n              await this[$renderer].supportsPresentation()) {\n            this[$arMode] = ARMode.WEBXR;\n            break;\n          } else if (value === 'scene-viewer' && IS_ANDROID) {\n            this[$arMode] = ARMode.SCENE_VIEWER;\n            break;\n          } else if (\n              value === 'quick-look' && !!this.iosSrc &&\n              this[$canLaunchQuickLook] && IS_AR_QUICKLOOK_CANDIDATE) {\n            this[$arMode] = ARMode.QUICK_LOOK;\n            break;\n          }\n          item = it.next();\n        }\n      }\n\n      if (this.canActivateAR) {\n        this[$arButtonContainer].classList.add('enabled');\n        // NOTE(cdata): The order of the two click handlers on the \"ar\n        // button container\" is important, vital to the workaround described\n        // earlier in this file. Reversing their order will cause our Scene\n        // Viewer integration to break.\n        // @see https://github.com/GoogleWebComponents/model-viewer/issues/693\n        this[$arButtonContainer].addEventListener(\n            'click', this[$arButtonContainerClickHandler]);\n        this[$arButtonContainer].addEventListener(\n            'click', this[$arButtonContainerFallbackClickHandler]);\n        this[$exitFullscreenButtonContainer].addEventListener(\n            'click', this[$exitFullscreenButtonContainerClickHandler]);\n      } else {\n        this[$arButtonContainer].removeEventListener(\n            'click', this[$arButtonContainerClickHandler]);\n        this[$arButtonContainer].removeEventListener(\n            'click', this[$arButtonContainerFallbackClickHandler]);\n        this[$exitFullscreenButtonContainer].removeEventListener(\n            'click', this[$exitFullscreenButtonContainerClickHandler]);\n        this[$arButtonContainer].classList.remove('enabled');\n      }\n    }\n\n    [$onARButtonContainerFallbackClick](_event: Event) {\n      if (this[$arMode] === ARMode.SCENE_VIEWER &&\n          this[$arModes].has('fallback')) {\n        this.requestFullscreen();\n      }\n    }\n\n    [$onARButtonContainerClick](event: Event) {\n      event.preventDefault();\n      this.activateAR();\n    }\n\n    get[$canLaunchQuickLook](): boolean {\n      if (IS_IOS_CHROME) {\n        return this[$quickLookBrowsers].has('chrome');\n      } else if (IS_IOS_SAFARI) {\n        return this[$quickLookBrowsers].has('safari');\n      }\n\n      return false;\n    }\n  }\n\n  return ARModelViewerElement;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}