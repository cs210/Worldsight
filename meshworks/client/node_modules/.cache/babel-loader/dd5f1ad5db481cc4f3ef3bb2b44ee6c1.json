{"ast":null,"code":"/**\n * Taken, CommonJS-ified, and heavily modified from:\n * https://github.com/flyingsparx/NodeDirectUploader\n */\nS3Upload.prototype.server = '';\nS3Upload.prototype.signingUrl = '/sign-s3';\nS3Upload.prototype.signingUrlMethod = 'GET';\nS3Upload.prototype.successResponses = [200, 201];\nS3Upload.prototype.fileElement = null;\nS3Upload.prototype.files = null;\n\nS3Upload.prototype.onFinishS3Put = function (signResult, file) {\n  return console.log('base.onFinishS3Put()', signResult.publicUrl);\n};\n\nS3Upload.prototype.preprocess = function (file, next) {\n  console.log('base.preprocess()', file);\n  return next(file);\n};\n\nS3Upload.prototype.onProgress = function (percent, status, file) {\n  return console.log('base.onProgress()', percent, status);\n};\n\nS3Upload.prototype.onError = function (status, file) {\n  return console.log('base.onError()', status);\n};\n\nS3Upload.prototype.onSignedUrl = function (result) {};\n\nS3Upload.prototype.scrubFilename = function (filename) {\n  return filename.replace(/[^\\w\\d_\\-\\.]+/ig, '');\n};\n\nfunction S3Upload(options) {\n  if (options == null) {\n    options = {};\n  }\n\n  for (var option in options) {\n    if (options.hasOwnProperty(option)) {\n      this[option] = options[option];\n    }\n  }\n\n  var files = this.fileElement ? this.fileElement.files : this.files || [];\n  this.handleFileSelect(files);\n}\n\nS3Upload.prototype.handleFileSelect = function (files) {\n  var result = [];\n\n  for (var i = 0; i < files.length; i++) {\n    var file = files[i];\n    this.preprocess(file, function (processedFile) {\n      this.onProgress(0, 'Waiting', processedFile);\n      result.push(this.uploadFile(processedFile));\n      return result;\n    }.bind(this));\n  }\n};\n\nS3Upload.prototype.createCORSRequest = function (method, url, opts) {\n  var opts = opts || {};\n  var xhr = new XMLHttpRequest();\n\n  if (xhr.withCredentials != null) {\n    xhr.open(method, url, true);\n\n    if (opts.withCredentials != null) {\n      xhr.withCredentials = opts.withCredentials;\n    }\n  } else if (typeof XDomainRequest !== \"undefined\") {\n    xhr = new XDomainRequest();\n    xhr.open(method, url);\n  } else {\n    xhr = null;\n  }\n\n  return xhr;\n};\n\nS3Upload.prototype._getErrorRequestContext = function (xhr) {\n  return {\n    response: xhr.responseText,\n    status: xhr.status,\n    statusText: xhr.statusText,\n    readyState: xhr.readyState\n  };\n};\n\nS3Upload.prototype.executeOnSignedUrl = function (file, callback) {\n  var fileName = this.scrubFilename(file.name);\n  var queryString = '?objectName=' + fileName + '&contentType=' + encodeURIComponent(file.type);\n\n  if (this.s3path) {\n    queryString += '&path=' + encodeURIComponent(this.s3path);\n  }\n\n  if (this.signingUrlQueryParams) {\n    var signingUrlQueryParams = typeof this.signingUrlQueryParams === 'function' ? this.signingUrlQueryParams() : this.signingUrlQueryParams;\n    Object.keys(signingUrlQueryParams).forEach(function (key) {\n      var val = signingUrlQueryParams[key];\n      queryString += '&' + key + '=' + val;\n    });\n  }\n\n  var xhr = this.createCORSRequest(this.signingUrlMethod, this.server + this.signingUrl + queryString, {\n    withCredentials: this.signingUrlWithCredentials\n  });\n\n  if (this.signingUrlHeaders) {\n    var signingUrlHeaders = typeof this.signingUrlHeaders === 'function' ? this.signingUrlHeaders() : this.signingUrlHeaders;\n    Object.keys(signingUrlHeaders).forEach(function (key) {\n      var val = signingUrlHeaders[key];\n      xhr.setRequestHeader(key, val);\n    });\n  }\n\n  xhr.overrideMimeType && xhr.overrideMimeType('text/plain; charset=x-user-defined');\n\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState === 4 && this.successResponses.indexOf(xhr.status) >= 0) {\n      var result;\n\n      try {\n        result = JSON.parse(xhr.responseText);\n        this.onSignedUrl(result);\n      } catch (error) {\n        this.onError('Invalid response from server', file, this._getErrorRequestContext(xhr));\n        return false;\n      }\n\n      return callback(result);\n    } else if (xhr.readyState === 4 && this.successResponses.indexOf(xhr.status) < 0) {\n      return this.onError('Could not contact request signing server. Status = ' + xhr.status, file, this._getErrorRequestContext(xhr));\n    }\n  }.bind(this);\n\n  return xhr.send();\n};\n\nS3Upload.prototype.uploadToS3 = function (file, signResult) {\n  var xhr = this.createCORSRequest('PUT', signResult.signedUrl);\n\n  if (!xhr) {\n    this.onError('CORS not supported', file, {});\n  } else {\n    xhr.onload = function () {\n      if (this.successResponses.indexOf(xhr.status) >= 0) {\n        this.onProgress(100, 'Upload completed', file);\n        return this.onFinishS3Put(signResult, file);\n      } else {\n        return this.onError('Upload error: ' + xhr.status, file, this._getErrorRequestContext(xhr));\n      }\n    }.bind(this);\n\n    xhr.onerror = function () {\n      return this.onError('XHR error', file, this._getErrorRequestContext(xhr));\n    }.bind(this);\n\n    xhr.upload.onprogress = function (e) {\n      var percentLoaded;\n\n      if (e.lengthComputable) {\n        percentLoaded = Math.round(e.loaded / e.total * 100);\n        return this.onProgress(percentLoaded, percentLoaded === 100 ? 'Finalizing' : 'Uploading', file);\n      }\n    }.bind(this);\n  }\n\n  xhr.setRequestHeader('Content-Type', file.type);\n\n  if (this.contentDisposition) {\n    var disposition = this.contentDisposition;\n\n    if (disposition === 'auto') {\n      if (file.type.substr(0, 6) === 'image/') {\n        disposition = 'inline';\n      } else {\n        disposition = 'attachment';\n      }\n    }\n\n    var fileName = this.scrubFilename(file.name);\n    xhr.setRequestHeader('Content-Disposition', disposition + '; filename=\"' + fileName + '\"');\n  }\n\n  if (signResult.headers) {\n    var signResultHeaders = signResult.headers;\n    Object.keys(signResultHeaders).forEach(function (key) {\n      var val = signResultHeaders[key];\n      xhr.setRequestHeader(key, val);\n    });\n  }\n\n  if (this.uploadRequestHeaders) {\n    var uploadRequestHeaders = this.uploadRequestHeaders;\n    Object.keys(uploadRequestHeaders).forEach(function (key) {\n      var val = uploadRequestHeaders[key];\n      xhr.setRequestHeader(key, val);\n    });\n  } else {\n    xhr.setRequestHeader('x-amz-acl', 'public-read');\n  }\n\n  this.httprequest = xhr;\n  return xhr.send(file);\n};\n\nS3Upload.prototype.uploadFile = function (file) {\n  var uploadToS3Callback = this.uploadToS3.bind(this, file);\n  if (this.getSignedUrl) return this.getSignedUrl(file, uploadToS3Callback);\n  return this.executeOnSignedUrl(file, uploadToS3Callback);\n};\n\nS3Upload.prototype.abortUpload = function () {\n  this.httprequest && this.httprequest.abort();\n};\n\nmodule.exports = S3Upload;","map":{"version":3,"sources":["/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/react-s3-uploader/s3upload.js"],"names":["S3Upload","prototype","server","signingUrl","signingUrlMethod","successResponses","fileElement","files","onFinishS3Put","signResult","file","console","log","publicUrl","preprocess","next","onProgress","percent","status","onError","onSignedUrl","result","scrubFilename","filename","replace","options","option","hasOwnProperty","handleFileSelect","i","length","processedFile","push","uploadFile","bind","createCORSRequest","method","url","opts","xhr","XMLHttpRequest","withCredentials","open","XDomainRequest","_getErrorRequestContext","response","responseText","statusText","readyState","executeOnSignedUrl","callback","fileName","name","queryString","encodeURIComponent","type","s3path","signingUrlQueryParams","Object","keys","forEach","key","val","signingUrlWithCredentials","signingUrlHeaders","setRequestHeader","overrideMimeType","onreadystatechange","indexOf","JSON","parse","error","send","uploadToS3","signedUrl","onload","onerror","upload","onprogress","e","percentLoaded","lengthComputable","Math","round","loaded","total","contentDisposition","disposition","substr","headers","signResultHeaders","uploadRequestHeaders","httprequest","uploadToS3Callback","getSignedUrl","abortUpload","abort","module","exports"],"mappings":"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","sourcesContent":["/**\n * Taken, CommonJS-ified, and heavily modified from:\n * https://github.com/flyingsparx/NodeDirectUploader\n */\n\nS3Upload.prototype.server = '';\nS3Upload.prototype.signingUrl = '/sign-s3';\nS3Upload.prototype.signingUrlMethod = 'GET';\nS3Upload.prototype.successResponses = [200, 201];\nS3Upload.prototype.fileElement = null;\nS3Upload.prototype.files = null;\n\nS3Upload.prototype.onFinishS3Put = function(signResult, file) {\n    return console.log('base.onFinishS3Put()', signResult.publicUrl);\n};\n\nS3Upload.prototype.preprocess = function(file, next) {\n    console.log('base.preprocess()', file);\n    return next(file);\n};\n\nS3Upload.prototype.onProgress = function(percent, status, file) {\n    return console.log('base.onProgress()', percent, status);\n};\n\nS3Upload.prototype.onError = function(status, file) {\n    return console.log('base.onError()', status);\n};\n\nS3Upload.prototype.onSignedUrl = function(result) {};\n\nS3Upload.prototype.scrubFilename = function(filename) {\n    return filename.replace(/[^\\w\\d_\\-\\.]+/ig, '');\n};\n\nfunction S3Upload(options) {\n    if (options == null) {\n        options = {};\n    }\n    for (var option in options) {\n        if (options.hasOwnProperty(option)) {\n            this[option] = options[option];\n        }\n    }\n    var files = this.fileElement ? this.fileElement.files : this.files || [];\n    this.handleFileSelect(files);\n}\n\nS3Upload.prototype.handleFileSelect = function(files) {\n    var result = [];\n    for (var i=0; i < files.length; i++) {\n        var file = files[i];\n        this.preprocess(file, function(processedFile){\n          this.onProgress(0, 'Waiting', processedFile);\n          result.push(this.uploadFile(processedFile));\n          return result;\n        }.bind(this));\n    }\n};\n\nS3Upload.prototype.createCORSRequest = function(method, url, opts) {\n    var opts = opts || {};\n    var xhr = new XMLHttpRequest();\n\n    if (xhr.withCredentials != null) {\n        xhr.open(method, url, true);\n        if (opts.withCredentials != null) {\n            xhr.withCredentials = opts.withCredentials;\n        }\n    }\n    else if (typeof XDomainRequest !== \"undefined\") {\n        xhr = new XDomainRequest();\n        xhr.open(method, url);\n    }\n    else {\n        xhr = null;\n    }\n    return xhr;\n};\n\nS3Upload.prototype._getErrorRequestContext = function (xhr) {\n    return {\n      response: xhr.responseText,\n      status: xhr.status,\n      statusText: xhr.statusText,\n      readyState: xhr.readyState\n    };\n}\n\nS3Upload.prototype.executeOnSignedUrl = function(file, callback) {\n    var fileName = this.scrubFilename(file.name);\n    var queryString = '?objectName=' + fileName + '&contentType=' + encodeURIComponent(file.type);\n    if (this.s3path) {\n        queryString += '&path=' + encodeURIComponent(this.s3path);\n    }\n    if (this.signingUrlQueryParams) {\n        var signingUrlQueryParams = typeof this.signingUrlQueryParams === 'function' ? this.signingUrlQueryParams() : this.signingUrlQueryParams;\n        Object.keys(signingUrlQueryParams).forEach(function(key) {\n            var val = signingUrlQueryParams[key];\n            queryString += '&' + key + '=' + val;\n        });\n    }\n    var xhr = this.createCORSRequest(this.signingUrlMethod,\n        this.server + this.signingUrl + queryString, { withCredentials: this.signingUrlWithCredentials });\n    if (this.signingUrlHeaders) {\n        var signingUrlHeaders = typeof this.signingUrlHeaders === 'function' ? this.signingUrlHeaders() : this.signingUrlHeaders;\n        Object.keys(signingUrlHeaders).forEach(function(key) {\n            var val = signingUrlHeaders[key];\n            xhr.setRequestHeader(key, val);\n        });\n    }\n    xhr.overrideMimeType && xhr.overrideMimeType('text/plain; charset=x-user-defined');\n    xhr.onreadystatechange = function() {\n        if (xhr.readyState === 4 && this.successResponses.indexOf(xhr.status) >= 0) {\n            var result;\n            try {\n                result = JSON.parse(xhr.responseText);\n                this.onSignedUrl( result );\n            } catch (error) {\n                this.onError(\n                    'Invalid response from server',\n                    file,\n                    this._getErrorRequestContext(xhr)\n                );\n                return false;\n            }\n            return callback(result);\n        } else if (xhr.readyState === 4 && this.successResponses.indexOf(xhr.status) < 0) {\n            return this.onError(\n                'Could not contact request signing server. Status = ' + xhr.status,\n                file,\n                this._getErrorRequestContext(xhr)\n            );\n        }\n    }.bind(this);\n    return xhr.send();\n};\n\nS3Upload.prototype.uploadToS3 = function(file, signResult) {\n    var xhr = this.createCORSRequest('PUT', signResult.signedUrl);\n    if (!xhr) {\n        this.onError('CORS not supported', file, {});\n    } else {\n        xhr.onload = function() {\n            if (this.successResponses.indexOf(xhr.status) >= 0) {\n                this.onProgress(100, 'Upload completed', file);\n                return this.onFinishS3Put(signResult, file);\n            } else {\n                return this.onError(\n                    'Upload error: ' + xhr.status,\n                    file,\n                    this._getErrorRequestContext(xhr)\n                );\n            }\n        }.bind(this);\n        xhr.onerror = function() {\n            return this.onError(\n                'XHR error',\n                file,\n                this._getErrorRequestContext(xhr)\n            );\n        }.bind(this);\n        xhr.upload.onprogress = function(e) {\n            var percentLoaded;\n            if (e.lengthComputable) {\n                percentLoaded = Math.round((e.loaded / e.total) * 100);\n                return this.onProgress(percentLoaded, percentLoaded === 100 ? 'Finalizing' : 'Uploading', file);\n            }\n        }.bind(this);\n    }\n    xhr.setRequestHeader('Content-Type', file.type);\n    if (this.contentDisposition) {\n        var disposition = this.contentDisposition;\n        if (disposition === 'auto') {\n            if (file.type.substr(0, 6) === 'image/') {\n                disposition = 'inline';\n            } else {\n                disposition = 'attachment';\n            }\n        }\n\n        var fileName = this.scrubFilename(file.name)\n        xhr.setRequestHeader('Content-Disposition', disposition + '; filename=\"' + fileName + '\"');\n    }\n    if (signResult.headers) {\n        var signResultHeaders = signResult.headers\n        Object.keys(signResultHeaders).forEach(function(key) {\n            var val = signResultHeaders[key];\n            xhr.setRequestHeader(key, val);\n        })\n    }\n    if (this.uploadRequestHeaders) {\n        var uploadRequestHeaders = this.uploadRequestHeaders;\n        Object.keys(uploadRequestHeaders).forEach(function(key) {\n            var val = uploadRequestHeaders[key];\n            xhr.setRequestHeader(key, val);\n        });\n    } else {\n        xhr.setRequestHeader('x-amz-acl', 'public-read');\n    }\n    this.httprequest = xhr;\n    return xhr.send(file);\n};\n\nS3Upload.prototype.uploadFile = function(file) {\n    var uploadToS3Callback = this.uploadToS3.bind(this, file);\n\n    if(this.getSignedUrl) return this.getSignedUrl(file, uploadToS3Callback);\n    return this.executeOnSignedUrl(file, uploadToS3Callback);\n};\n\nS3Upload.prototype.abortUpload = function() {\n    this.httprequest && this.httprequest.abort();\n};\n\n\nmodule.exports = S3Upload;\n"]},"metadata":{},"sourceType":"script"}