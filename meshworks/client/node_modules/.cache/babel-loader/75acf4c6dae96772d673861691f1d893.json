{"ast":null,"code":"import _classCallCheck from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A constructor factory for a Material class. The Material is defined based on\n * a provided implementation for all specified 3DOM scene graph element types.\n *\n * The sole reason for using this factory pattern is to enable sound type\n * checking while also providing for the ability to stringify the factory so\n * that it can be part of a runtime-generated Worker script.\n *\n * @see ../api.ts\n */\nexport function defineMaterial(ThreeDOMElement) {\n  var $pbrMetallicRoughness = Symbol('pbrMetallicRoughness');\n  var $kernel = Symbol('kernel');\n  var $name = Symbol('name');\n  /**\n   * A Material represents a live material in the backing scene graph. Its\n   * primary purpose is to give the user write access to discrete properties\n   * (for example, the base color factor) of the backing material.\n   */\n\n  var Material = /*#__PURE__*/function (_ThreeDOMElement) {\n    _inherits(Material, _ThreeDOMElement);\n\n    var _super = _createSuper(Material);\n\n    function Material(kernel, serialized) {\n      var _this;\n\n      _classCallCheck(this, Material);\n\n      _this = _super.call(this, kernel, serialized);\n      _this[$kernel] = kernel;\n\n      if (serialized.name != null) {\n        _this[$name] = serialized.name;\n      }\n\n      _this[$pbrMetallicRoughness] = kernel.deserialize('pbr-metallic-roughness', serialized.pbrMetallicRoughness);\n      return _this;\n    }\n    /**\n     * The PBR properties that are assigned to this material, if any.\n     */\n\n\n    _createClass(Material, [{\n      key: \"pbrMetallicRoughness\",\n      get: function get() {\n        return this[$pbrMetallicRoughness];\n      }\n      /**\n       * The name of the material. Note that names are optional and not\n       * guaranteed to be unique.\n       */\n\n    }, {\n      key: \"name\",\n      get: function get() {\n        return this[$name];\n      }\n    }]);\n\n    return Material;\n  }(ThreeDOMElement);\n\n  return Material;\n}","map":{"version":3,"sources":["../../src/api/material.ts"],"names":[],"mappings":";;;;;AAAA;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;AAUA,OAAM,SAAU,cAAV,CAAyB,eAAzB,EAAsE;AAE1E,MAAM,qBAAqB,GAAG,MAAM,CAAC,sBAAD,CAApC;AACA,MAAM,OAAO,GAAG,MAAM,CAAC,QAAD,CAAtB;AACA,MAAM,KAAK,GAAG,MAAM,CAAC,MAAD,CAApB;AAEA;;;;;;AAN0E,MAWpE,QAXoE;AAAA;;AAAA;;AAgBxE,sBAAY,MAAZ,EAAiC,UAAjC,EAA+D;AAAA;;AAAA;;AAC7D,gCAAM,MAAN,EAAc,UAAd;AAEA,YAAK,OAAL,IAAgB,MAAhB;;AAEA,UAAI,UAAU,CAAC,IAAX,IAAmB,IAAvB,EAA6B;AAC3B,cAAK,KAAL,IAAc,UAAU,CAAC,IAAzB;AACD;;AAED,YAAK,qBAAL,IAA8B,MAAM,CAAC,WAAP,CAC1B,wBAD0B,EACA,UAAU,CAAC,oBADX,CAA9B;AAT6D;AAW9D;AAED;;;;;AA7BwE;AAAA;AAAA,0BAgChD;AACtB,eAAO,KAAK,qBAAL,CAAP;AACD;AAED;;;;;AApCwE;AAAA;AAAA,0BAwChE;AACN,eAAO,KAAK,KAAL,CAAP;AACD;AA1CuE;;AAAA;AAAA,IAWnD,eAXmD;;AA6C1E,SAAO,QAAP;AACD","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ConstructedWithArguments, Constructor, Material as MaterialInterface, PBRMetallicRoughness, ThreeDOMElement} from '../api.js';\nimport {SerializedMaterial} from '../protocol.js';\n\nimport {ModelKernel} from './model-kernel.js';\n\nexport type MaterialConstructor = Constructor<MaterialInterface>&\n    ConstructedWithArguments<[ModelKernel, SerializedMaterial]>;\n/**\n * A constructor factory for a Material class. The Material is defined based on\n * a provided implementation for all specified 3DOM scene graph element types.\n *\n * The sole reason for using this factory pattern is to enable sound type\n * checking while also providing for the ability to stringify the factory so\n * that it can be part of a runtime-generated Worker script.\n *\n * @see ../api.ts\n */\nexport function defineMaterial(ThreeDOMElement: Constructor<ThreeDOMElement>):\n    MaterialConstructor {\n  const $pbrMetallicRoughness = Symbol('pbrMetallicRoughness');\n  const $kernel = Symbol('kernel');\n  const $name = Symbol('name');\n\n  /**\n   * A Material represents a live material in the backing scene graph. Its\n   * primary purpose is to give the user write access to discrete properties\n   * (for example, the base color factor) of the backing material.\n   */\n  class Material extends ThreeDOMElement implements MaterialInterface {\n    protected[$pbrMetallicRoughness]: PBRMetallicRoughness;\n    protected[$kernel]: ModelKernel;\n    protected[$name]: string;\n\n    constructor(kernel: ModelKernel, serialized: SerializedMaterial) {\n      super(kernel, serialized);\n\n      this[$kernel] = kernel;\n\n      if (serialized.name != null) {\n        this[$name] = serialized.name;\n      }\n\n      this[$pbrMetallicRoughness] = kernel.deserialize(\n          'pbr-metallic-roughness', serialized.pbrMetallicRoughness);\n    }\n\n    /**\n     * The PBR properties that are assigned to this material, if any.\n     */\n    get pbrMetallicRoughness() {\n      return this[$pbrMetallicRoughness];\n    }\n\n    /**\n     * The name of the material. Note that names are optional and not\n     * guaranteed to be unique.\n     */\n    get name() {\n      return this[$name];\n    }\n  }\n\n  return Material;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}