{"ast":null,"code":"import _regeneratorRuntime from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/aakankshasaxena/Documents/Junior/Meshworks/Worldsight/meshworks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Converts a base64 string which represents a data url\n * into a Blob of the same contents.\n */\nexport var dataUrlToBlob = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(base64DataUrl) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n              var sliceSize = 512;\n              var typeMatch = base64DataUrl.match(/data:(.*);/);\n\n              if (!typeMatch) {\n                return reject(new Error(\"\".concat(base64DataUrl, \" is not a valid data Url\")));\n              }\n\n              var type = typeMatch[1];\n              var base64 = base64DataUrl.replace(/data:image\\/\\w+;base64,/, '');\n              var byteCharacters = atob(base64);\n              var byteArrays = [];\n\n              for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n                var slice = byteCharacters.slice(offset, offset + sliceSize);\n                var byteNumbers = new Array(slice.length);\n\n                for (var i = 0; i < slice.length; i++) {\n                  byteNumbers[i] = slice.charCodeAt(i);\n                }\n\n                var byteArray = new Uint8Array(byteNumbers);\n                byteArrays.push(byteArray);\n              }\n\n              resolve(new Blob(byteArrays, {\n                type: type\n              }));\n            }));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function dataUrlToBlob(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["../../src/utilities/data-conversion.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;AAeA;;;;AAIA,OAAO,IAAM,aAAa;AAAA,sEAAG,iBAAM,aAAN;AAAA;AAAA;AAAA;AAAA;AAAA,6CACpB,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAoB;AACrC,kBAAM,SAAS,GAAG,GAAlB;AACA,kBAAM,SAAS,GAAG,aAAa,CAAC,KAAd,CAAoB,YAApB,CAAlB;;AAEA,kBAAI,CAAC,SAAL,EAAgB;AACd,uBAAO,MAAM,CAAC,IAAI,KAAJ,WAAa,aAAb,8BAAD,CAAb;AACD;;AAED,kBAAM,IAAI,GAAG,SAAS,CAAC,CAAD,CAAtB;AACA,kBAAM,MAAM,GAAG,aAAa,CAAC,OAAd,CAAsB,yBAAtB,EAAiD,EAAjD,CAAf;AAEA,kBAAM,cAAc,GAAG,IAAI,CAAC,MAAD,CAA3B;AACA,kBAAM,UAAU,GAAG,EAAnB;;AAEA,mBAAK,IAAI,MAAM,GAAG,CAAlB,EAAqB,MAAM,GAAG,cAAc,CAAC,MAA7C,EAAqD,MAAM,IAAI,SAA/D,EAA0E;AACxE,oBAAM,KAAK,GAAG,cAAc,CAAC,KAAf,CAAqB,MAArB,EAA6B,MAAM,GAAG,SAAtC,CAAd;AAEA,oBAAM,WAAW,GAAG,IAAI,KAAJ,CAAU,KAAK,CAAC,MAAhB,CAApB;;AACA,qBAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EAAuC;AACrC,kBAAA,WAAW,CAAC,CAAD,CAAX,GAAiB,KAAK,CAAC,UAAN,CAAiB,CAAjB,CAAjB;AACD;;AAED,oBAAM,SAAS,GAAG,IAAI,UAAJ,CAAe,WAAf,CAAlB;AACA,gBAAA,UAAU,CAAC,IAAX,CAAgB,SAAhB;AACD;;AAED,cAAA,OAAO,CAAC,IAAI,IAAJ,CAAS,UAAT,EAAqB;AAAC,gBAAA,IAAI,EAAJ;AAAD,eAArB,CAAD,CAAP;AACD,aA3BM,CADoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAb,aAAa;AAAA;AAAA;AAAA,GAAnB","sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Converts a base64 string which represents a data url\n * into a Blob of the same contents.\n */\nexport const dataUrlToBlob = async(base64DataUrl: string): Promise<Blob> => {\n  return new Promise((resolve, reject) => {\n    const sliceSize = 512;\n    const typeMatch = base64DataUrl.match(/data:(.*);/);\n\n    if (!typeMatch) {\n      return reject(new Error(`${base64DataUrl} is not a valid data Url`));\n    }\n\n    const type = typeMatch[1];\n    const base64 = base64DataUrl.replace(/data:image\\/\\w+;base64,/, '');\n\n    const byteCharacters = atob(base64);\n    const byteArrays = [];\n\n    for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n      const slice = byteCharacters.slice(offset, offset + sliceSize);\n\n      const byteNumbers = new Array(slice.length);\n      for (let i = 0; i < slice.length; i++) {\n        byteNumbers[i] = slice.charCodeAt(i);\n      }\n\n      const byteArray = new Uint8Array(byteNumbers);\n      byteArrays.push(byteArray);\n    }\n\n    resolve(new Blob(byteArrays, {type}));\n  });\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}